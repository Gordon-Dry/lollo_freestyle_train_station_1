function data()
    local arrayUtils = require('lollo_freestyle_train_station.arrayUtils')
    -- local constants = require('lollo_freestyle_train_station.constants')
    local fenceModelHelper = require('lollo_fence_assets.modelHelper')
    local logger = require('lollo_freestyle_train_station.logger')
    local transfUtils = require('lollo_freestyle_train_station.transfUtils')

	return {
        type = 'ASSET_DEFAULT',
		availability = {
			yearFrom = 0,
			yearTo = 0,
		},
        categories = { 'stairs' },
		description = {
			name = _('FenceAssetsName'),
			description = _('FenceAssetsDesc'),
            icon = 'ui/construction/lollo_freestyle_train_station/fence_assets.tga',
		},
		order = 1110,
		autoRemovable = false,
        -- buildMode = 'MULTI',
		skipCollision = true,
        snapping = {
			rail = true,
			road = true,
			water = false
		},
		params = fenceModelHelper.getConParams(),
		updateFn = function(params)
            logger.print('fenceAssetsScript.updateFn firing, params =') logger.debugPrint(arrayUtils.cloneDeepOmittingFields(params, {'state'}, true))

            local _initParams = function()
                local defaults = fenceModelHelper.getDefaultIndexes()
                params.lolloFenceAssets_length = params.lolloFenceAssets_length or defaults.length
                params.lolloFenceAssets_model = params.lolloFenceAssets_model or defaults.model
                params.lolloFenceAssets_wallEraPrefix = params.lolloFenceAssets_wallEraPrefix or defaults.wallEraPrefix
                params.lolloFenceAssets_yShift = params.lolloFenceAssets_yShift or defaults.yShift
                params.lolloFenceAssets_zDelta = params.lolloFenceAssets_zDelta or defaults.zDelta
                params.lolloFenceAssets_zRotation = params.lolloFenceAssets_zRotation or defaults.zRotation
            end
            _initParams()

            -- we don't use paramX and paramY coz they are awkward here
            -- they cycle in steps of math.pi / 16, just in case you want to add them.

            local function _getWallModelId()
                local wallModelId = nil
                if params.lolloFenceAssets_wallEraPrefix == 1 then
                    wallModelId = 'lollo_freestyle_train_station/trackWalls/era_a_wall_base_5m.mdl'
                elseif params.lolloFenceAssets_wallEraPrefix == 2 then
                    wallModelId = 'lollo_freestyle_train_station/trackWalls/era_b_wall_base_5m.mdl'
                elseif params.lolloFenceAssets_wallEraPrefix == 3 then
                    wallModelId = 'lollo_freestyle_train_station/trackWalls/era_c_wall_base_5m.mdl'
                end
                return wallModelId
            end

            local function _getYStart()
                local result = fenceModelHelper.getYShiftActualValues()[params.lolloFenceAssets_yShift + 1]
                return result
            end

            local function _getZShift()
                local result = fenceModelHelper.getZDeltaActualValues()[params.lolloFenceAssets_zDelta + 1]
                return result
            end

            local function _getZRotationParameters()
                local zRotRad = params.lolloFenceAssets_length == 0
                    and 0
                    or fenceModelHelper.getZRotationActualValues()[params.lolloFenceAssets_zRotation + 1] / (params.lolloFenceAssets_length)

                local yShift = math.sin(zRotRad) * 0.5 -- walls are 1 m wide and their axes are centred at the bottom middle rear. They are about 0.1 m thick.
                local xShift = math.cos(zRotRad) * 0.5 + 0.5
                if zRotRad > 0 then -- compensate for XYZ decentering in the model, which is required for other purposes
                    xShift = xShift - 0.097 * math.sin(zRotRad)
                    yShift = yShift - 0.097 * (1 - math.cos(zRotRad))
                end

                return xShift, yShift, zRotRad
            end

            local result = {
                colliders = {},
                cost = 0,
                edgeLists = {},
                groundFaces = { -- dummy ground faces so this is treated as a proper construction, and the construction mover can adjust it
                    {
                        face = {
                            {0.1, -0.1, 0.0, 1.0},
                            {0.1, 0.1, 0.0, 1.0},
                            {-0.1, 0.1, 0.0, 1.0},
                            {-0.1, -0.1, 0.0, 1.0},
                        },
                        modes = {
                            {
                                type = 'FILL',
                                key = 'shared/asphalt_01.gtex.lua' --'shared/gravel_03.gtex.lua'
                            }
                        }
                    },
                },
                models = {
					-- {
					-- 	id = 'lollo_freestyle_train_station/icon/blue.mdl',
                    --     transf = {1, 0, 0, 0,
                    --         0, 1, 0, 0,
                    --         0, 0, 1, 0,
                    --         0, 0, 0, 1},
					-- },
                },
                terrainAlignmentLists = { {
                    type = 'EQUAL',
                    optional = true,
                    faces =  { }
                } },
            }

            local function _addTop()
                local zStart = _getWallModelId() == nil and 0 or 1.4
                local yStart = _getYStart()

                local fenceModelId = fenceModelHelper.getModels()[params.lolloFenceAssets_model + 1].fileName

                local xShift, yShift, zRotRad = _getZRotationParameters()
                local zShift = _getZShift()
                logger.print('_addTop got zRotRad =', 180 / math.pi * zRotRad, ', yShift =', yShift, ', xShift =', xShift, ', zShift =', zShift)

                local myTransf = {
                    1, 0, 0, 0,
                    0, 1, 0, 0,
                    0, 0, 1, 0,
                    0, yStart, zStart, 1
                }
                for i = 1, params.lolloFenceAssets_length + 1, 1 do
                    result.models[#result.models+1] = {
                        id = fenceModelId,
                        transf = myTransf
                    }
                    myTransf = transfUtils.getTransf_ZRotated_Shifted(
                        myTransf,
                        zRotRad,
                        {xShift, yShift, zShift * xShift}
                    )
                end
            end
            _addTop()

            local function _addBottom()
                local yStart = _getYStart()

                local wallModelId = nil
                if params.lolloFenceAssets_wallEraPrefix == 1 then
                    wallModelId = 'lollo_freestyle_train_station/trackWalls/era_a_wall_base_5m.mdl'
                elseif params.lolloFenceAssets_wallEraPrefix == 2 then
                    wallModelId = 'lollo_freestyle_train_station/trackWalls/era_b_wall_base_5m.mdl'
                elseif params.lolloFenceAssets_wallEraPrefix == 3 then
                    wallModelId = 'lollo_freestyle_train_station/trackWalls/era_c_wall_base_5m.mdl'
                else
                    return
                end

                local xShift, yShift, zRotRad = _getZRotationParameters()
                local zShift = _getZShift()
                logger.print('_addBottom wall got zRotRad =', 180 / math.pi * zRotRad, ', yShift =', yShift, ', xShift =', xShift, ', zShift =', zShift)

                local myTransf = {
                    1, 0, 0, 0,
                    0, 1, 0, 0,
                    0, 0, 1, 0,
                    0, yStart, 1.4, 1
                }
                for i = 1, params.lolloFenceAssets_length + 1, 1 do
                    result.models[#result.models+1] = {
                        id = wallModelId,
                        transf = myTransf
                    }
                    myTransf = transfUtils.getTransf_ZRotated_Shifted(
                        myTransf,
                        zRotRad,
                        {xShift, yShift, zShift * xShift}
                    )
                end
            end
            _addBottom()

			return result
		end,

        upgradeFn = function(params)
            return {}
        end,
	}
end
