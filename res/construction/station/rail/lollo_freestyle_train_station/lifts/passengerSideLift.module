local _constants = require('lollo_freestyle_train_station.constants')
-- local constructionutil = require 'constructionutil'
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
local modulesutil = require 'modulesutil'
local slotHelpers = require('lollo_freestyle_train_station.slotHelpers')
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require 'transf'


function data()

return {
	availability = {
		yearFrom = 0,
		yearTo = 0
	},
	category = {
		categories = { 'passenger-road-access', },
	},
	cost = {
		price = 0,
	},
	description = {
		name = _('PassengerSideLiftName'),
		description = _('PassengerSideLiftDesc'),
		icon = 'ui/lollo_freestyle_train_station/passengerSideLift.tga'
	},
	metadata = {
		moreCapacity = {
			cargo = 0,
			passenger = 40
		},
	},
	order = {
		value = 42,
	},
	type = _constants.passengerSideLiftModuleType,
	updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, updateScriptParams)
		local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
		if not nTerminal or not nTrackEdge or not baseId then return end

		-- LOLLO NOTE tag looks like '__module_201030', never mind what you write into it, the game overwrites it
		-- in base_config.lua
		-- Set it into the models so the game knows what module they belong to.
		local eraPrefix = moduleHelpers.getEraPrefix(params, nTerminal, nTrackEdge)
		local buildingHeight = moduleHelpers.lifts.tryGetLiftHeight(params, nTerminal, nTrackEdge, slotId)
		if not(buildingHeight) then return end
		local buildingModelId = moduleHelpers.lifts.tryGetSideLiftModelId(params, nTerminal, nTrackEdge, eraPrefix, buildingHeight)
		if not(buildingModelId) then return end

		-- add building
		local buildingTransf = transfUtilsUG.mul(
			slotTransf,
			{ 0, 1, 0, 0,  -1, 0, 0, 0,  0, 0, 1, 0,  0, 0, 0, 1 }
		)
		result.models[#result.models + 1] = {
			id = buildingModelId,
			slotId = slotId,
			transf = buildingTransf,
			tag = tag
		}
		-- add waiting area
		result.models[#result.models + 1] = {
			id = 'lollo_freestyle_train_station/railroad/flatSides/passengers/passenger_waiting_area_side_lift.mdl',
			slotId = slotId,
			transf = buildingTransf,
			tag = slotHelpers.mangleModelTag(nTerminal, false),
		}
		-- add lane to centre platform
		local cpl = params.terminals[nTerminal].centrePlatformsRelative[nTrackEdge]
		local crossConnectorPosTanX2 = params.terminals[nTerminal].crossConnectorsRelative[nTrackEdge].posTanX2
		result.models[#result.models+1] = {
			id = _constants.passengerLaneModelId,
			transf = transfUtils.get1MLaneTransf(
				transfUtils.getPositionRaisedBy(crossConnectorPosTanX2[2][1], result.laneZs[nTerminal]),
				transfUtils.transf2Position(slotTransf)
			)
		}

		-- add underpass bottom pos 2 link
		local underpassBottomTransf = transfUtils.getTransfZShiftedBy(slotTransf, _constants.underpassZ)
		if result.terminateConstructionHookInfo.underpassPositionsOnBridge[nTerminal] == nil then result.terminateConstructionHookInfo.underpassPositionsOnBridge[nTerminal] = {} end
		table.insert(
			result.terminateConstructionHookInfo.underpassPositionsOnBridge[nTerminal],
			{
				t = nTerminal,
				era = eraPrefix,
				lanePosTanX2 = cpl.posTanX2,
				pos2Link = transfUtils.transf2Position(underpassBottomTransf)
			}
		)

		-- add lift bottom pos 2 link
		if result.terminateConstructionHookInfo.liftBottomPositions[nTerminal] == nil then result.terminateConstructionHookInfo.liftBottomPositions[nTerminal] = {} end
		table.insert(
			result.terminateConstructionHookInfo.liftBottomPositions[nTerminal],
			{
				t = nTerminal,
				lanePosTanX2 = cpl.posTanX2,
				pos2Link = transfUtils.transf2Position(
					transfUtilsUG.mul(buildingTransf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, -2.0, -buildingHeight + _constants.underpassZ, 1 })
				)
			}
		)

		-- add station square slots
		table.insert(result.slots, {
			id = result.mangleId(nTerminal, nTrackEdge, _constants.idBases.passengerStationSquareOuterSlotId),
			shape = 1,
			spacing = {-1, 4, 4, 4},
			transf = transfUtilsUG.mul(
				buildingTransf,
				{ 0, -1, 0, 0,  1, 0, 0, 0,  0, 0, 1, 0,  0, -4.75, -buildingHeight, 1 }
			),
			type = _constants.passengerStationSquareModuleType,
		})
		table.insert(result.slots, {
			id = result.mangleId(nTerminal, nTrackEdge, _constants.idBases.passengerStationSquareInnerSlotId),
			shape = 1,
			spacing = {-1, 4, 4, 4},
			transf = transfUtilsUG.mul(
				buildingTransf,
				{ 0, 1, 0, 0,  -1, 0, 0, 0,  0, 0, 1, 0,  0, 0.75, -buildingHeight, 1 }
			),
			type = _constants.passengerStationSquareModuleType,
		})

		-- add some deco
		local _clockY = -4.3
		if eraPrefix == moduleHelpers.eras.era_a.prefix then
			_clockY = -3.95
		elseif eraPrefix == moduleHelpers.eras.era_b.prefix and buildingHeight >= 15 then
			_clockY = -4.5
		end
		local clockModelId = eraPrefix == moduleHelpers.eras.era_c.prefix
			and 'lollo_freestyle_train_station/asset/era_c_big_clock.mdl'
			or 'station/rail/asset/era_a_big_clock.mdl'
		if buildingHeight == 10 then
			result.models[#result.models + 1] = {
				id = clockModelId,
				slotId = slotId,
				transf = transfUtilsUG.mul(
					buildingTransf,
					{ 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, _clockY, - 3.8, 1 }
				),
				tag = tag
			}
		elseif buildingHeight >= 15 then
			result.models[#result.models + 1] = {
				id = clockModelId,
				slotId = slotId,
				transf = transfUtilsUG.mul(
					buildingTransf,
					{ 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, _clockY, - 5.8, 1 }
				),
				tag = tag
			}
		end

		if eraPrefix == moduleHelpers.eras.era_c.prefix then
			local _tableY = 0.8
			if buildingHeight == 10 then
				result.models[#result.models + 1] = {
					id = 'lollo_freestyle_train_station/asset/tabellone_hanging.mdl',
					slotId = slotId,
					transf = transfUtilsUG.mul(
						buildingTransf,
						{ 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, _tableY, 6.2 - buildingHeight, 1 }
					),
					tag = tag
				}
			elseif buildingHeight >= 15 then
				result.models[#result.models + 1] = {
					id = 'lollo_freestyle_train_station/asset/tabellone_hanging.mdl',
					slotId = slotId,
					transf = transfUtilsUG.mul(
						buildingTransf,
						{ 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, _tableY, 5.5 - buildingHeight, 1 }
					),
					tag = tag
				}
			end
		end

		if eraPrefix ~= moduleHelpers.eras.era_a.prefix and buildingHeight > 0 then
			result.models[#result.models + 1] = {
				id = 'lollo_freestyle_train_station/asset/arrivi.mdl',
				slotId = slotId,
				transf = transfUtilsUG.mul(
					buildingTransf,
					{ 1, 0, 0, 0,  0, -1, 0, 0,  0, 0, 1, 0,  2.7, -3.3, 0, 1 }
				),
				tag = tag
			}
			result.models[#result.models + 1] = {
				id = 'lollo_freestyle_train_station/asset/partenze.mdl',
				slotId = slotId,
				transf = transfUtilsUG.mul(
					buildingTransf,
					{ -1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  -2.7, -3.3, 0, 1 }
				),
				tag = tag
			}
		end

		moduleHelpers.lifts.doTerrain4SideLifts(buildingHeight, slotTransf, result,
		_constants.era_c_groundFacesFillKey, _constants.era_c_groundFacesStrokeOuterKey)
	end,

	getModelsFn = function(params)
		return {
			{
				id = 'lollo_freestyle_train_station/lift/side_lifts_9_5_20.mdl',
				transf = _constants.idTransf,
			},
			moduleHelpers.lifts.getPreviewIcon(params),
		}
	end
}

end
