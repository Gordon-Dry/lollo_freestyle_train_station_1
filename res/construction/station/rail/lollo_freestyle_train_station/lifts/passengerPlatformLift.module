local _constants = require('lollo_freestyle_train_station.constants')
-- local constructionutil = require "constructionutil"
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
local modulesutil = require "modulesutil"
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require "transf"


function data()

return {
	availability = {
		yearFrom = 0,
		yearTo = 0
	},
	category = {
		categories = { "passenger-road-access", },
	},
	cost = {
		price = 0,
	},
	description = {
		name = _("PassengerPlatformLiftName"),
		description = _("PassengerPlatformLiftDesc"),
		icon = "ui/lollo_freestyle_train_station/passengerPlatformLift.tga"
	},
	metadata = {
		moreCapacity = {
			cargo = 0,
			passenger = 40
		},
	},
	order = {
		value = 41,
	},
	type = _constants.passengerPlatformLiftModuleType,
	updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, updateScriptParams)
		local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
		if not nTerminal or not nTrackEdge or not baseId then return end

		-- LOLLO NOTE tag looks like '__module_201030', never mind what you write into it, the game overwrites it
		-- in base_config.lua
		-- Set it into the models so the game knows what module they belong to.

		local era = moduleHelpers.getEraPrefix(params, nTerminal, nTrackEdge)
		local buildingHeight = moduleHelpers.lifts.tryGetLiftHeight(params, nTerminal, nTrackEdge, slotId)
		if not(buildingHeight) then return end
		local buildingModelId = moduleHelpers.lifts.tryGetPlatformLiftModelId(params, nTerminal, nTrackEdge, era, buildingHeight)
		if not(buildingModelId) then return end

		-- print('buildingHeight =', buildingHeight)
		-- print('buildingModelId =', buildingModelId)
		result.models[#result.models + 1] = {
			id = buildingModelId,
			slotId = slotId,
			transf = slotTransf,
			tag = tag
		}

		if result.terminateConstructionHookInfo.liftBottomPositions[nTerminal] == nil then result.terminateConstructionHookInfo.liftBottomPositions[nTerminal] = {} end
		local cpl = params.terminals[nTerminal].centrePlatformsRelative[nTrackEdge]
		table.insert(
			result.terminateConstructionHookInfo.liftBottomPositions[nTerminal],
			{
				t = nTerminal,
				lanePosTanX2 = cpl.posTanX2,
				pos2Link = transfUtils.transf2Position(
					transfUtils.getTransfZShiftedBy(slotTransf, -buildingHeight + _constants.underpassZ)
				)
			}
		)

		table.insert(result.slots, {
			id = result.mangleId(nTerminal, nTrackEdge, _constants.idBases.passengerStationSquareOuterSlotId),
			shape = 1,
			spacing = {-1, 4, 4, 4},
			transf = transfUtilsUG.mul(
				slotTransf,
				{ 0, -1, 0, 0,  1, 0, 0, 0,  0, 0, 1, 0,  0, -3.4, -buildingHeight, 1 }
			),
			type = _constants.passengerStationSquareModuleType,
		})
		table.insert(result.slots, {
			id = result.mangleId(nTerminal, nTrackEdge, _constants.idBases.passengerStationSquareInnerSlotId),
			shape = 1,
			spacing = {-1, 4, 4, 4},
			transf = transfUtilsUG.mul(
				slotTransf,
				{ 0, 1, 0, 0,  -1, 0, 0, 0,  0, 0, 1, 0,  0, 2.9, -buildingHeight, 1 }
			),
			type = _constants.passengerStationSquareModuleType,
		})

		-- add some deco
		local _clockY = era == moduleHelpers.eras.era_a.prefix and -2.5 or -2.9
		local clockModelId = era == moduleHelpers.eras.era_c.prefix
			and 'station/rail/asset/era_c_big_clock.mdl'
			or 'station/rail/asset/era_a_big_clock.mdl'
		if buildingHeight >= 10 then
			result.models[#result.models + 1] = {
				id = clockModelId,
				slotId = slotId,
				transf = transfUtilsUG.mul(
					slotTransf,
					{ 0.5, 0, 0, 0,  0, 1, 0, 0,  0, 0, 0.5, 0,  0, _clockY, 6.3 - buildingHeight, 1 }
				),
				tag = tag
			}
		end

		if era == moduleHelpers.eras.era_c.prefix then
			local _tableY = 2.2
			if buildingHeight >= 10 then
				result.models[#result.models + 1] = {
					id = 'lollo_freestyle_train_station/asset/tabellone_hanging.mdl',
					slotId = slotId,
					transf = transfUtilsUG.mul(
						slotTransf,
						{ 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, _tableY, 5.0 - buildingHeight, 1 }
					),
					tag = tag
				}
			end
		end

		local groundFace = { -- the ground faces ignore z, the alignment lists don't
			{-6.5, -4.2, -buildingHeight, 1},
			{-6.5, 3.8, -buildingHeight, 1},
			{6.5, 3.8, -buildingHeight, 1},
			{6.5, -4.2, -buildingHeight, 1},
		}
		modulesutil.TransformFaces(slotTransf, groundFace)
		table.insert(
			result.groundFaces,
			{
				face = groundFace,
				modes = {
					{
						type = 'FILL',
						key = _constants.era_c_groundFacesFillKey
					},
					{
						type = 'STROKE_OUTER',
						key = _constants.era_c_groundFacesStrokeOuterKey
					}
				}
			}
		)

		local terrainAlignmentList = {
			faces = { groundFace },
			optional = true,
			slopeHigh = _constants.slopeHigh,
			slopeLow = _constants.slopeLow,
			type = 'EQUAL',
		}
		result.terrainAlignmentLists[#result.terrainAlignmentLists + 1] = terrainAlignmentList
	end,

	getModelsFn = function(params)
		return {
			{
				id = 'lollo_freestyle_train_station/lift/platform_lifts_9_5_20.mdl',
				transf = { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, 0, 0, 1 },
			},
		}
	end
}

end
