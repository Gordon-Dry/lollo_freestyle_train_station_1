local _constants = require('lollo_freestyle_train_station.constants')
-- local constructionutil = require "constructionutil"
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
local modulesutil = require "modulesutil"
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require "transf"
local vec3 = require "vec3"


function data()

return {
	availability = {
		yearFrom = -1,
		yearTo = -1
	},
	category = {
		categories = { "street access", },
	},
	cost = {
		price = 0,
	},
	description = {
		name = _("SubwayName"),
		description = _("SubwayDesc"),
		icon = "ui/construction/station/street/cargo_area_inner_12x12.tga"
	},
	metadata = { },
	order = {
		value = 55,
	},
	-- skipCollision = true,
	type = _constants.subwayModuleType,
	updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, updateScriptParams)
		local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
		if not nTerminal or not baseId then return end

		result.models[#result.models + 1] = {
			id = _constants.subwayModelId,
			slotId = slotId,
			transf = transfUtilsUG.mul(slotTransf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, 0, 0, 1 }),
			tag = tag
		}

		local groundFace = { -- the ground faces ignore z, the alignment lists don't
			{0.1, -0.95, 0, 1},
			{0.1, 0.95, 0, 1},
			{4.5, 0.95, 0, 1},
			{4.5, -0.95, 0, 1},
		}
		modulesutil.TransformFaces(slotTransf, groundFace)
		table.insert(
			result.groundFaces,
			{
				face = groundFace,
				loop = true,
				modes = {
					{
						-- key = 'shared/asphalt_01.gtex.lua'
						key = 'lollo_freestyle_train_station/hole.lua',
						type = 'FILL',
					},
					-- {
					-- 	-- key = 'shared/asphalt_01.gtex.lua',
					-- 	key = 'lollo_freestyle_train_station/hole.lua',
					-- 	type = 'STROKE_INNER',
					-- },
					{
						-- key = 'street_border.lua'
						-- key = 'shared/asphalt_01.gtex.lua',
						key = 'lollo_freestyle_train_station/asphalt_01_high_priority.lua',
						type = 'STROKE_OUTER',
					}
				}
			}
		)
		table.insert(
			result.terrainAlignmentLists,
			{
				faces =  { groundFace },
				optional = true,
				slopeHigh = 99,
				slopeLow = 0.9, --0.1,
				type = "EQUAL",
			}
		)
		print('subway.module.updateFn ending')
	end,

	getModelsFn = function(params)
		return {
			{
				id = _constants.subwayModelId,
				transf = transfUtilsUG.transl(vec3.new(0.0, 0.0, 0.0)),
			},
		}
	end
}

end
