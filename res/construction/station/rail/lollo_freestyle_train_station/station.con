local _constants = require('lollo_freestyle_train_station.constants')
local arrayUtils = require('lollo_freestyle_train_station.arrayUtils')
local edgeUtils = require('lollo_freestyle_train_station.edgeUtils')
local slotHelpers = require('lollo_freestyle_train_station.slotHelpers')
local stringUtils = require('lollo_freestyle_train_station.stringUtils')
local transfUtilUG = require 'transf'
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local vec3 = require 'vec3'


function data()
	return {
		type = 'RAIL_STATION',
		description = {
			name = _("Lollo Freestyle Train Station"),
			description = _("Lollo Freestyle Train Station."),
		},
		availability = {
			yearFrom = -1, -- 1925, -- -1,
			yearTo = -1, -- -1, -- 0
		},
		order = 5005,
		soundConfig = {
			soundSet = { name = "station_cargo_old" }
		},
		autoRemovable = false,
		skipCollision = true, -- we need this to change the street type when reconfiguring
		params = { -- keep it empty or it will crash coz it won't find the params, which I pass when building the construction
            -- {
            --     key = 'fileName',
            --     name = 'File Name',
            --     values = {
            --         'dummy',
            --     },
            --     defaultIndex = 0
            -- }
        },
		updateFn = function(params)
			print('updateFn starting, params =')
			debugPrint(params)

			-- math.randomseed(params.seed)

			if not params.modules then params.modules = {} end

			local sampleParams =
			{
			  myTransf = { 0.46245205402374, 0.88664430379868, 0, 0, -0.88664430379868, 0.46245205402374, 0, 0, 0, 0, 1, 0, -987.02911376953, -1698.1489257813, 11.531784057617, 1, },
			  platformEdgeIds = { 25291, 24152, 25282, },
			  seed = 1230000,
			  state = {
				groups = {
				  random_large_tree = { "tree/european_linden.mdl", "tree/scots_pine.mdl", "tree/sugar_maple.mdl", },
				  random_large_tree_town = { "tree/european_linden.mdl", "tree/sugar_maple.mdl", },
				  random_medium_tree = { "tree/red_delicious_apple.mdl", "tree/shingle_oak.mdl", },
				  random_medium_tree_airport = { "tree/shingle_oak.mdl", },
				  random_medium_tree_town = { "tree/red_delicious_apple.mdl", "tree/shingle_oak.mdl", },
				  random_shrub = { "tree/azalea.mdl", "tree/common_hazel.mdl", "tree/elderberry.mdl", },
				  random_shrub_airport = { "tree/azalea.mdl", "tree/elderberry.mdl", },
				  random_shrub_town = { "tree/azalea.mdl", "tree/elderberry.mdl", },
				  random_shrub_town_fence = { "tree/azalea.mdl", },
				  random_small_tree = { "tree/azalea.mdl", "tree/common_hazel.mdl", "tree/elderberry.mdl", },
				  random_small_tree_town = { "tree/azalea.mdl", "tree/elderberry.mdl", },
				},
				track = {
				  ballastCutOff = 0.10000000149012,
				  ballastHeight = 0.30000001192093,
				  ballastMaterial = "track/ballast.mtl",
				  borderGroundTex = "ballast.lua",
				  bumperModel = "railroad/bumper.mdl",
				  catenaryBase = 6.4470000267029,
				  catenaryHeight = 1.3500000238419,
				  catenaryMaterial = "track/catenary.mtl",
				  catenaryMaxPoleDistance = 2,
				  catenaryMinPoleDistance = 0.80000001192093,
				  catenaryMultiGirderModel = "railroad/power_pole_us_1a_repeat.mdl",
				  catenaryMultiInnerPoleModel = "railroad/power_pole_us_1b_pole2.mdl",
				  catenaryMultiPoleModel = "railroad/power_pole_us_1_pole.mdl",
				  catenaryPoleDistance = 32,
				  catenaryPoleModel = "railroad/power_pole_us_2.mdl",
				  cost = 75,
				  desc = "Standard tracks with limited speed capabilities.",
				  fillGroundTex = "ballast_fill.lua",
				  icon = "ui/tracks/standard.tga",
				  maxSlope = 0.11999999731779,
				  maxSlopeBuild = 0.075000002980232,
				  maxSlopeShape = 0.15000000596046,
				  minCurveRadius = 44,
				  minCurveRadiusBuild = 60,
				  name = "Standard tracks",
				  railBase = 0.37999999523163,
				  railCutOff = 0.019999999552965,
				  railHeight = 0.15000000596046,
				  railMaterial = "track/rail.mtl",
				  railModel = "railroad/tracks/single_rail.mdl",
				  railTrackWidth = 1.4349999427795,
				  railWidth = 0.070000000298023,
				  shapeSleeperStep = 0.66666668653488,
				  shapeStep = 4,
				  shapeWidth = 4,
				  sleeperBase = 0.30000001192093,
				  sleeperCutOff = 0.019999999552965,
				  sleeperHeight = 0.079999998211861,
				  sleeperLength = 0.25999999046326,
				  sleeperMaterial = "track/sleeper.mtl",
				  sleeperModel = "railroad/tracks/single_sleeper_base.mdl",
				  sleeperWidth = 2.5999999046326,
				  slopeBuildSteps = 2,
				  speedCoeffs = { 0.85000002384186, 30, 0.60000002384186, },
				  speedLimit = 33.333332061768,
				  switchSignalModel = "railroad/switch_box.mdl",
				  trackDistance = 5,
				  trackStraightModel = { "railroad/tracks/2m_base.mdl", "railroad/tracks/4m_base.mdl", "railroad/tracks/8m_base.mdl", "railroad/tracks/16m_base.mdl", },
				  tunnelHullMaterial = "track/tunnel_hull.mtl",
				  tunnelWallMaterial = "track/tunnel_rail_ug.mtl",
				  yearFrom = 0,
				  yearTo = 0,
				},
			  },
			  trackEdgeLists = {
				{
				  catenary = true,
				  posTanX2 = {
					{
					  { -1016.0612182617, -1724.4984130859, 12.625776290894, },
					  { 43.891380310059, 27.93595123291, -2.9827115535736, },
					},
					{
					  { -985.90667724609, -1682.0408935547, 10.668236732483, },
					  { 14.657909393311, 50.000553131104, -0.92598873376846, },
					},
				  },
				  trackType = 0,
				  trackTypeName = "high_speed.lua",
				  type = 0,
				  typeIndex = -1,
				},
				{
				  catenary = true,
				  posTanX2 = {
					{
					  { -985.90667724609, -1682.0408935547, 10.668236732483, },
					  { 13.101428031921, 44.691135406494, -0.8276606798172, },
					},
					{
					  { -986.13043212891, -1635.4637451172, 10.286678314209, },
					  { -15.766356468201, 43.829719543457, -0.088118009269238, },
					},
				  },
				  trackType = 0,
				  trackTypeName = "high_speed.lua",
				  type = 0,
				  typeIndex = -1,
				},
			  },
			}

            -- LOLLO NOTE I cannot call the api from here, sigh.
			local result = {
				colliders = {},
				-- coord2terminalInfo = {},
                cost = 1000,
                demangleId = slotHelpers.demangleId,
                edgeLists = {},
                groundFaces = {},
                mangleId = slotHelpers.mangleId,
				models = {
					{
						id = 'lollo_freestyle_train_station/icon/blue.mdl',
						tag = 'stationTag',
                        transf = {1, 0, 0, 0,
                            0, 1, 0, 0,
                            0, 0, 1, 0,
                            0, 0, 0, 1},
					},
                },
                -- slotConfig = {},
                slots = {},
				stations = {},
				terminalGroups = {},
				terrainAlignmentLists = {},
			}

			local terminateConstructionHookInfo = {
				isAnyCargoTerminal = false,
				isAnyPassengersTerminal = false,
				vehicleNodes = {}
			}
			-- LOLLO NOTE the coordinates in terminals are absolute
			local mainTransf = params.mainTransf
			local inverseMainTransf = transfUtils.getInverseTransf(mainTransf)
			print('inverseMainTransf =')
			debugPrint(inverseMainTransf)
			for t = 1, #params.terminals do
				local isCargoTerminal = params.terminals[t].isCargo
				if isCargoTerminal then terminateConstructionHookInfo.isAnyCargoTerminal = true else terminateConstructionHookInfo.isAnyPassengersTerminal = true end
				-- add terminal slots
				local inverseMyTransf = transfUtils.getInverseTransf(params.terminals[t].myTransf)
				table.insert(result.slots, {
					-- height = 1,
					id = result.mangleId(t, 0, _constants.idBases.terminalSlotId),
					-- shape 0 1 2 3
					-- shape = 3,
					spacing = _constants.trackSpacing,
					-- transf = _constants.idTransf,
					transf = transfUtilUG.mul(
						transfUtilUG.mul(inverseMyTransf, mainTransf),
						_constants.idTransf
					),
					type = _constants.terminalModuleType,
				})

				-- add track edges
				for i = 1, #params.terminals[t].trackEdgeLists do
					local tel = params.terminals[t].trackEdgeLists[i]
					local newEdgeList = {
						edges = transfUtils.getPosTanX2Transformed(tel.posTanX2, inverseMainTransf),
						edgeType = tel.edgeType,
						edgeTypeName = tel.edgeTypeName,
						freeNodes = {},
						params = {
							type = tel.trackTypeName,
							catenary = tel.catenary
						},
						snapNodes = {},
						-- tag2Nodes = {},
						type = 'TRACK'
					}

					if i == 1 then
						newEdgeList.snapNodes[#newEdgeList.snapNodes+1] = 0
					end
					if i == #params.terminals[t].trackEdgeLists then
						newEdgeList.snapNodes[#newEdgeList.snapNodes+1] = 1
					end

					-- LOLLO NOTE the edges won't snap to the neighbours
					-- unless you rebuild those neighbours, by hand or by script,
					-- and make them snap to the station own nodes.
					result.edgeLists[#result.edgeLists+1] = newEdgeList
				end
				terminateConstructionHookInfo.vehicleNodes[t] = #result.edgeLists * 2 - 2

				-- this is only a test to see if the transformation was ok. They match beautifully! Use this when talking to UG.
				-- if #result.edgeLists > 0 then
				-- 	local firstPosTanX2 = result.edgeLists[1].edges
				-- 	print('firstPosTanX2 =') debugPrint(firstPosTanX2)
				-- 	local retransformedFirstEdge = transfUtils.getPosTanX2Transformed(firstPosTanX2, params.myTransf)
				-- 	print('retransformed first edge =') debugPrint(retransformedFirstEdge)
				-- end

				-- add platform edges
				for i = 1, #params.terminals[t].platformEdgeLists do
					local pel = params.terminals[t].platformEdgeLists[i]

					local newEdgeList = {
						edges = transfUtils.getPosTanX2Transformed(pel.posTanX2, inverseMainTransf),
						edgeType = pel.edgeType,
						edgeTypeName = pel.edgeTypeName,
						freeNodes = {},
						params = {
							type = pel.trackTypeName,
							catenary = false --pel.catenary
						},
						snapNodes = {},
						-- tag2Nodes = {},
						type = 'TRACK'
					}

					result.edgeLists[#result.edgeLists+1] = newEdgeList
				end

				-- add waiting areas
				for i = 1, #params.terminals[t].waitingAreaPositions do
					local wap = params.terminals[t].waitingAreaPositions[i]

					local platformPosTanX2 = transfUtils.getPosTanX2Transformed(wap.posTanX2, inverseMainTransf)
					-- solve this system:
					-- first point: 0, 0, 0 => platformPosTanX2[1][1]
					-- transf[13] = platformPosTanX2[1][1][1]
					-- transf[14] = platformPosTanX2[1][1][2]
					-- transf[15] = platformPosTanX2[1][1][3]
					-- second point: 1, 0, 0 => platformPosTanX2[2][1]
					-- transf[1] + transf[13] = platformPosTanX2[2][1][1]
					-- transf[2] + transf[14] = platformPosTanX2[2][1][2]
					-- transf[3] + transf[15] = platformPosTanX2[2][1][3]
					local waitingAreaTransf = {
						platformPosTanX2[2][1][1] - platformPosTanX2[1][1][1],
						platformPosTanX2[2][1][2] - platformPosTanX2[1][1][2],
						platformPosTanX2[2][1][3] - platformPosTanX2[1][1][3],
						0,
						0, 1, 0, 0,
						0, 0, 1, 0,
						platformPosTanX2[1][1][1],
						platformPosTanX2[1][1][2],
						platformPosTanX2[1][1][3],
						1
					}
					result.models[#result.models+1] = {
						id = isCargoTerminal and _constants.cargoWaitingAreaModelId or _constants.passengersWaitingAreaModelId,
						tag = slotHelpers.mangleModelTag(t, isCargoTerminal),
						transf = waitingAreaTransf
					}
				end
			end

			print('game =')
			if game ~= nil then
				print('game is there')
				if game.interface ~= nil then
					print('game.interface is there too')
				else
					print('game.interface is NIL')
				end
			else
				print('NIL')
			end

			print('api =')
			if api ~= nil then
                print('api is there')
            else
                print('NIL')
			end

			result.terminateConstructionHook = function()
				print('terminateConstructionHook starting')
				-- LOLLO NOTE stations with mixed cargo and passengers seem impossible
				result.stations = { }
				if terminateConstructionHookInfo.isAnyCargoTerminal then
					result.stations[#result.stations+1] = {
						tag = 0, -- in the stock station, this is 0 for cargo and 1 for passengers
						terminals = { } -- 0 is the position of the linked terminal group, in base 0
					}
				end
				if terminateConstructionHookInfo.isAnyPassengersTerminal then
					result.stations[#result.stations+1] = {
						tag = 1, -- in the stock station, this is 0 for cargo and 1 for passengers
						terminals = { } -- 0 is the position of the linked terminal group, in base 0
					}
				end

				for t = 1, #params.terminals do
					local isCargoTerminal = params.terminals[t].isCargo
					table.insert(
						result.terminalGroups,
						{
							tag = t - 1,
							terminals = {
								-- { 0, 0 }
							},
							-- UG TODO ask UG if they can make a parameter similar to the following,
							-- to override personEdges and personNodes.
							-- This way, I won't be bound to using a model to assign a waiting area.
							-- LOLLO NOTE there can be 1 terminal 4 1 vehicle node,
							-- n terminals 4 1 person edge,
							-- n terminals 4 1 person node
							-- vehicleNodeOverride = #params.terminals[t].trackEdgeLists - 1
							vehicleNodeOverride = terminateConstructionHookInfo.vehicleNodes[t]
						}
					)

					local waitingAreaModelIndexesBase0 = {}
					for i = 1, #result.models do
						if slotHelpers.getTerminalFromModelTag(result.models[i].tag) == t then
							waitingAreaModelIndexesBase0[#waitingAreaModelIndexesBase0+1] = i - 1
						end
					end
					for _, modelIndex in pairs(waitingAreaModelIndexesBase0) do
						-- table.insert(result.terminalGroups[#result.terminalGroups].terminals, {modelIndex, t - 1}) -- NO!
						table.insert(result.terminalGroups[#result.terminalGroups].terminals, {modelIndex, 0})
					end

					local stationIndex = arrayUtils.findIndex(result.stations, 'tag', isCargoTerminal and 0 or 1)
					table.insert(result.stations[stationIndex].terminals, t - 1)
				end

				-- avoid dump when configuring
				-- if #(result.stations[1].terminals) == 0 then
				-- 	print('avoiding dump when configuring')
				-- 	table.insert(result.stations[1].terminals, 0)
				-- 	print('result.stations =') debugPrint(result.stations)
				-- end
				-- it should output something like (this example has one terminal made of two adjacent bits)
				-- stock result.stations =
				-- 	{
				-- 		{
				-- 			tag = 0, -- in the stock station, this is 0 for cargo and 1 for passengers
				-- 			terminals = { 0 } -- 0 is the position of the linked terminal group, in base 0
				-- 		}
				-- 	}
				-- stock result.terminalGroups =
				-- {
				-- 	{
				-- 		tag = -1, -- possibly useless, try to keep them all different tho
				-- 		terminals = {
				-- 			{ 22, 0 }, -- 22 is the position of a model with a terminal, in base 0
				-- 			{ 25, 0 }, -- 0 is always 0 in the stock station, it is something like a terminal number
				-- 		}
				-- 	}
				-- }

				print('LOLLO lollo_freestyle_train_station leaving terminateConstructionHook')
				-- print('LOLLO result = ') debugPrint(result)
				-- print('LOLLO result.stations = ') debugPrint(result.stations)
				-- print('LOLLO result.terminalGroups = ') debugPrint(result.terminalGroups)
			end
			-- _terminateConstructionHook()

			-- print('freestyleTrainStation result =') debugPrint(result)

			return result
		end,
 		-- preProcessFn = function(modules, change, three)
		-- 	-- this fires when the user adds or removes a module
		-- 	print('LOLLO preProcessFn')
		-- 	print('modules =') debugPrint(modules)
		-- 	print('change =') debugPrint(change)
		-- 	-- default behaviour
		-- 	if change.added then
		-- 		modules[change.slotId] = change.module
		-- 	else
		-- 		modules[change.slotId] = nil
		-- 	end
		-- 	-- airport behaviour
		-- 	-- if change.added then
		-- 	-- 	if change.slotId == landingSlotId + 1 then
		-- 	-- 		modules[landingSlotId + 0] = nil
		-- 	-- 	elseif change.slotId == landingSlotId + 0 then
		-- 	-- 		modules[landingSlotId + 1] = nil
		-- 	-- 	elseif change.slotId == landingSlotId + 2 then
		-- 	-- 		modules[landingSlotId + 3] = nil
		-- 	-- 	elseif change.slotId == landingSlotId + 3 then
		-- 	-- 		modules[landingSlotId + 2] = nil
		-- 	-- 	end
		-- 	-- 	modules[change.slotId] = change.module
		-- 	-- else
		-- 	-- 	modules[change.slotId] = nil
		-- 	-- end
		-- 	return modules
        -- end,
        upgradeFn = function(params)
            -- LOLLO TODO allow upgrading tracks.
            -- this sample is from the modular station, which puts edges in modules.
            -- I don't coz they are curved, so see what I can do.
            print('LOLLO upgradeFn')
            local modules = {}

            local SwapModule = function(slotId, from, to)
                if params.modules[slotId] and params.modules[slotId].name == from then
                    table.insert(modules, {slotId, to})
                    return true
                end
                return false
            end
            local SwapRow = function(slotId, from, to)
                local slotId2 = slotId
                while SwapModule(slotId2, from, to) do 
                    slotId2 = slotId2 + 10
                end
                slotId2 = slotId
                while SwapModule(slotId2, from, to) do 
                    slotId2 = slotId2 - 10
                end
            end

            if params.modules[params.slotId] == nil then return {} end

            if params.catenaryToggle == 1 then 
                SwapRow(params.slotId, "station/rail/modular_station/platform_high_speed_track.module",
                    "station/rail/modular_station/platform_high_speed_track_catenary.module")
                SwapRow(params.slotId, "station/rail/modular_station/platform_track.module",
                    "station/rail/modular_station/platform_track_catenary.module")
                SwapRow(params.slotId, "station/rail/modular_station/platform_high_speed_track_catenary.module", 
                    "station/rail/modular_station/platform_high_speed_track.module")
                SwapRow(params.slotId, "station/rail/modular_station/platform_track_catenary.module", 
                    "station/rail/modular_station/platform_track.module")
            end
            if params.trackTypeToggle == 1 then 
                SwapRow(params.slotId, "station/rail/modular_station/platform_high_speed_track.module",
                    "station/rail/modular_station/platform_track.module")
                SwapRow(params.slotId, "station/rail/modular_station/platform_track.module",
                    "station/rail/modular_station/platform_high_speed_track.module")
                SwapRow(params.slotId, "station/rail/modular_station/platform_high_speed_track_catenary.module",
                    "station/rail/modular_station/platform_track_catenary.module")
                SwapRow(params.slotId, "station/rail/modular_station/platform_track_catenary.module",
                    "station/rail/modular_station/platform_high_speed_track_catenary.module")
            end

            return modules
        end,
	}
end