local _constants = require('lollo_freestyle_train_station.constants')
local arrayUtils = require('lollo_freestyle_train_station.arrayUtils')
local edgeUtils = require('lollo_freestyle_train_station.edgeUtils')
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
local slotHelpers = require('lollo_freestyle_train_station.slotHelpers')
local stringUtils = require('lollo_freestyle_train_station.stringUtils')
local transfUtilsUG = require 'transf'
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local vec3 = require 'vec3'


function data()
	return {
		type = 'RAIL_STATION',
		description = {
			name = _("Lollo Freestyle Train Station"),
			description = _("Lollo Freestyle Train Station."),
		},
		availability = {
			yearFrom = -1, -- 1925, -- -1,
			yearTo = -1, -- -1, -- 0
		},
		order = 5005,
		soundConfig = {
			soundSet = { name = "station_cargo_old" }
		},
		autoRemovable = false,
		skipCollision = true, -- we need this when reconfiguring
		params = { -- keep it empty or it will crash coz it won't find the params, which I pass when building the construction
            -- {
            --     key = 'fileName',
            --     name = 'File Name',
            --     values = {
            --         'dummy',
            --     },
            --     defaultIndex = 0
            -- }
        },
		updateFn = function(params)
			-- print('updateFn starting, params =') debugPrint(params)
			print('updateFn starting, params.modules =') debugPrint(params.modules)
			if not params.modules then params.modules = {} end

			-- LOLLO NOTE I cannot call the api from here, sigh.
			print('game =')
			if game ~= nil then
				print('game is there')
				if game.interface ~= nil then
					print('game.interface is there too')
				else
					print('game.interface is NIL')
				end
			else
				print('NIL')
			end

			print('api =')
			if api ~= nil then
                print('api is there')
            else
                print('NIL')
			end

			local result = {
				colliders = {},
				-- coord2terminalInfo = {},
                cost = 1000,
                demangleId = slotHelpers.demangleId,
                edgeLists = {},
				groundFaces = {},
				labelText = {},
                mangleId = slotHelpers.mangleId,
				models = {
					-- {
					-- 	id = 'lollo_freestyle_train_station/icon/blue.mdl',
					-- 	tag = 'stationTag',
                    --     transf = {1, 0, 0, 0,
                    --         0, 1, 0, 0,
                    --         0, 0, 1, 0,
                    --         0, 0, 0, 1},
					-- },
                },
				slotConfig = {
					[_constants.cargoTerminalModuleType] = {
						maxModules = -1,
						message = nil, --'LOLLO slotConfig message',
						skipCollisionCheck = true,
					},
					[_constants.passengerTerminalModuleType] = {
						maxModules = -1,
						message = nil, --'LOLLO slotConfig message',
						skipCollisionCheck = true,
					},
					[_constants.underpassModuleType] = {
						maxModules = -1,
						message = nil, --'LOLLO slotConfig message',
						skipCollisionCheck = true,
					}
				},
                slots = {},
				stations = {},
				terminalGroups = {},
				terrainAlignmentLists = {},
			}

			local terminateConstructionHookInfo = {
				isAnyCargoTerminal = false,
				isAnyPassengerTerminal = false,
				underpassPositions = {},
				vehicleNodes = {}
			}
			-- LOLLO NOTE the coordinates in terminals are absolute
			local mainTransf = params.mainTransf
			local inverseMainTransf = transfUtils.getInverseTransf(mainTransf)
			-- print('inverseMainTransf =') debugPrint(inverseMainTransf)

			for t = 1, #params.terminals do
				local isCargoTerminal = params.terminals[t].isCargo
				if isCargoTerminal then terminateConstructionHookInfo.isAnyCargoTerminal = true else terminateConstructionHookInfo.isAnyPassengerTerminal = true end

				-- add track edges
				for i = 1, #params.terminals[t].trackEdgeLists do
					local tel = params.terminals[t].trackEdgeLists[i]
					local newEdgeList = {
						-- alignTerrain = tel.type == 0, -- only align on ground, not on bridges or tunnels -- useless
						edges = transfUtils.getPosTanX2Transformed(tel.posTanX2, inverseMainTransf),
						edgeType = tel.edgeType,
						edgeTypeName = tel.edgeTypeName,
						freeNodes = {},
						params = {
							type = tel.trackTypeName,
							catenary = tel.catenary
						},
						snapNodes = {},
						-- tag2Nodes = {},
						type = 'TRACK'
					}

					if i == 1 then
						newEdgeList.snapNodes[#newEdgeList.snapNodes+1] = 0
					end
					if i == #params.terminals[t].trackEdgeLists then
						newEdgeList.snapNodes[#newEdgeList.snapNodes+1] = 1
					end

					-- LOLLO NOTE the edges won't snap to the neighbours
					-- unless you rebuild those neighbours, by hand or by script,
					-- and make them snap to the station own nodes.
					result.edgeLists[#result.edgeLists+1] = newEdgeList
				end
				terminateConstructionHookInfo.vehicleNodes[t] = (#result.edgeLists - math.floor(#params.terminals[t].trackEdgeLists * 0.5)) * 2 - 1

				-- this is only a test to see if the transformation was ok. They match beautifully! Use this when talking to UG.
				-- if #result.edgeLists > 0 then
				-- 	local firstPosTanX2 = result.edgeLists[1].edges
				-- 	print('firstPosTanX2 =') debugPrint(firstPosTanX2)
				-- 	local retransformedFirstEdge = transfUtils.getPosTanX2Transformed(firstPosTanX2, params.myTransf)
				-- 	print('retransformed first edge =') debugPrint(retransformedFirstEdge)
				-- end

				-- add platform edges
				for i = 1, #params.terminals[t].platformEdgeLists do
					local pel = params.terminals[t].platformEdgeLists[i]

					local newEdgeList = {
						-- alignTerrain = pel.type == 0, -- only align on ground, not on bridges or tunnels -- useless
						edges = transfUtils.getPosTanX2Transformed(pel.posTanX2, inverseMainTransf),
						edgeType = pel.edgeType,
						edgeTypeName = pel.edgeTypeName,
						freeNodes = {},
						params = {
							type = pel.trackTypeName,
							catenary = false --pel.catenary
						},
						snapNodes = {},
						-- tag2Nodes = {},
						type = 'TRACK'
					}

					result.edgeLists[#result.edgeLists+1] = newEdgeList
				end
				-- this works, too, as an alternative.
				-- for i = 1, #params.terminals[t].centreLanePositionsFine do
				-- 	local wap = params.terminals[t].centreLanePositionsFine[i]
				-- 	local posTanX2 = transfUtils.getPosTanX2Transformed(wap.posTanX2, inverseMainTransf)
				-- 	result.models[#result.models+1] = {
				-- 		id = 'lollo_freestyle_train_station/railroad/track/era_c_passenger_platform_1m_base.mdl',
				-- 		-- tag = slotHelpers.mangleModelTag(t, false),
				-- 		transf = moduleHelpers.getPlatformObjectTransf_WithYRotation(posTanX2)
				-- 	}
				-- end

				-- add waiting areas and lanes
				-- LOLLO TODO add cargo platform-tracks in different widths (5, 10, 15), with extra wait areas
				if isCargoTerminal then
					for i = 1, #params.terminals[t].centreLanePositions do
						local posTanX2 = transfUtils.getPosTanX2Transformed(params.terminals[t].centreLanePositions[i].posTanX2, inverseMainTransf)
						local centreLaneTransf = moduleHelpers.get1MLaneTransf(posTanX2[1][1], posTanX2[2][1])
						result.models[#result.models+1] = {
							id = _constants.cargoWaitingAreaModelId,
							tag = slotHelpers.mangleModelTag(t, true),
							transf = centreLaneTransf
						}
					end
				else
					for i = 1, #params.terminals[t].centreLanePositions do
						local isUnderpass = params.modules[result.mangleId(t, i, _constants.idBases.underpassSlotId)] ~= nil
						local posTanX2 = transfUtils.getPosTanX2Transformed(params.terminals[t].centreLanePositions[i].posTanX2, inverseMainTransf)
						local centreLaneTransf = moduleHelpers.get1MLaneTransf(posTanX2[1][1], posTanX2[2][1])
						result.models[#result.models+1] = {
							id = isUnderpass and _constants.passengerLaneUnderpassModelId or _constants.passengerLaneOnPlatformModelId,
							tag = slotHelpers.mangleModelTag(t, false, isUnderpass),
							transf = centreLaneTransf
						}
						if isUnderpass then
							local underpassBottomTransf = transfUtilsUG.mul(
								centreLaneTransf,
								{ 0.1, 0, 0, 0,  0, 0.1, 0, 0,  0, 0, 1, 0,  _constants.underpassLengthM * 0.5, 0, _constants.laneZ - _constants.underpassDepthM, 1 }
							)
							-- result.models[#result.models+1] = {
							-- 	id = 'lollo_freestyle_train_station/icon/green.mdl',
							-- 	-- tag = slotHelpers.mangleModelTag(t, false),
							-- 	transf = underpassBottomTransf
							-- }
							if terminateConstructionHookInfo.underpassPositions[t] == nil then terminateConstructionHookInfo.underpassPositions[t] = {} end
							terminateConstructionHookInfo.underpassPositions[t][#terminateConstructionHookInfo.underpassPositions[t]+1] = {
								t = t,
								pos1 = posTanX2[1][1],
								pos2 = posTanX2[2][1],
								posBottom = {
									underpassBottomTransf[13],
									underpassBottomTransf[14],
									underpassBottomTransf[15]
								}
							}
						end
					end
					for i = 1, #params.terminals[t].leftLanePositions do
						local posTanX2Relative = transfUtils.getPosTanX2Transformed(params.terminals[t].leftLanePositions[i].posTanX2, inverseMainTransf)
						local leftLaneTransf = moduleHelpers.get1MLaneTransf(posTanX2Relative[1][1], posTanX2Relative[2][1])

						result.models[#result.models+1] = {
							id = _constants.passengerWaitingAreaModelId,
							tag = slotHelpers.mangleModelTag(t, false),
							transf = leftLaneTransf
						}
					end
					for i = 1, #params.terminals[t].rightLanePositions do
						local posTanX2Relative = transfUtils.getPosTanX2Transformed(params.terminals[t].rightLanePositions[i].posTanX2, inverseMainTransf)
						local rightLaneTransf = moduleHelpers.get1MLaneTransf(posTanX2Relative[1][1], posTanX2Relative[2][1])

						result.models[#result.models+1] = {
							id = _constants.passengerWaitingAreaModelId,
							tag = slotHelpers.mangleModelTag(t, false),
							transf = rightLaneTransf
						}
					end
					for i = 1, #params.terminals[t].crossConnectorPositions do
						local posTanX2Relative = transfUtils.getPosTanX2Transformed(params.terminals[t].crossConnectorPositions[i].posTanX2, inverseMainTransf)
						local crossConnectorTransf = moduleHelpers.get1MLaneTransf(posTanX2Relative[1][1], posTanX2Relative[2][1])

						result.models[#result.models+1] = {
							id = _constants.passengerLaneOnPlatformModelId,
							tag = slotHelpers.mangleModelTag(t, false),
							transf = crossConnectorTransf
						}
					end
				end

				-- LOLLO TODO add module type: stairs

				local _addTerminal = function()
					local i = math.ceil(#params.terminals[t].centreLanePositions * 0.5)
					local wap = params.terminals[t].centreLanePositions[i]
					local posTanX2 = transfUtils.getPosTanX2Transformed(wap.posTanX2, inverseMainTransf)
					-- LOLLO TODO the underpasses below turn yellow when the user wants to remove them:
					-- good, but these guys don't, unless there is only one terminal: why?
					table.insert(result.slots, {
						-- height = 10,
						id = result.mangleId(t, 0, _constants.idBases.terminalSlotId),
						-- shape 0 1 2 3
						shape = 3,
						spacing = _constants.trackSpacing,
						-- spacing = _constants.underpassSpacing,
						-- transf = moduleHelpers.get1MLaneTransf(posTanX2[1][1], posTanX2[2][1]),
						-- transf = transfUtilsUG.mul(
						-- 	moduleHelpers.getPlatformObjectTransf_WithYRotation(posTanX2),
						-- 	{1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, 0, 1, 1}
						-- ),
						transf = moduleHelpers.getPlatformObjectTransf_WithYRotation(posTanX2),
						-- transf = moduleHelpers.getPlatformObjectTransf_AlwaysVertical(posTanX2),
						type = isCargoTerminal and _constants.cargoTerminalModuleType or _constants.passengerTerminalModuleType,
					})
					result.models[#result.models+1] = {
						id = _constants.terminalModelFileName,
						-- tag = slotHelpers.mangleModelTag(t, false),
						transf = moduleHelpers.getPlatformObjectTransf_AlwaysVertical(posTanX2)
						-- transf = moduleHelpers.getPlatformObjectTransf_WithYRotation(posTanX2)
					}
				end
				_addTerminal()

				-- add underpass slots, skipping the ends
				if not(isCargoTerminal) then
					for i = 2, #params.terminals[t].centreLanePositions - 1, 4 do
						local wap = params.terminals[t].centreLanePositions[i]
						local posTanX2 = transfUtils.getPosTanX2Transformed(wap.posTanX2, inverseMainTransf)
						table.insert(result.slots, {
							-- height = 1,
							id = result.mangleId(t, i, _constants.idBases.underpassSlotId),
							-- shape 0 1 2 3
							-- shape = 3,
							spacing = _constants.underpassSpacing,
							transf = moduleHelpers.getPlatformObjectTransf_AlwaysVertical(posTanX2),
							type = _constants.underpassModuleType,
						})
						if params.modules[result.mangleId(t, i, _constants.idBases.underpassSlotId)] ~= nil then
							result.models[#result.models+1] = {
								id = _constants.underpassModelFileName2,
								-- tag = slotHelpers.mangleModelTag(t, false),
								transf = moduleHelpers.getPlatformObjectTransf_WithYRotation(posTanX2)
							}
						end
					end
				end
			end -- loop over terminals

			result.terminateConstructionHook = function()
				-- print('terminateConstructionHook starting')
				-- LOLLO NOTE stations with mixed cargo and passengers seem impossible by design.
				-- There are some assertions, like allPersonEdgesHaveTransportModePerson != allPersonEdgesHaveTransportModeCargo,
				-- that point at this.
				result.stations = { }
				if terminateConstructionHookInfo.isAnyCargoTerminal then
					result.stations[#result.stations+1] = {
						tag = 0, -- in the stock station, this is 0 for cargo and 1 for passengers
						terminals = { } -- 0 is the position of the linked terminal group, in base 0
					}
				end
				if terminateConstructionHookInfo.isAnyPassengerTerminal then
					result.stations[#result.stations+1] = {
						tag = 1, -- in the stock station, this is 0 for cargo and 1 for passengers
						terminals = { } -- 0 is the position of the linked terminal group, in base 0
					}
				end

				for t = 1, #params.terminals do
					local isCargoTerminal = params.terminals[t].isCargo
					table.insert(
						result.terminalGroups,
						{
							tag = t - 1,
							terminals = {
								-- { 0, 0 }
							},
							-- UG TODO ask UG if they can make a parameter similar to the following,
							-- to override personEdges and personNodes.
							-- This way, I won't be bound to using a model to assign a waiting area.
							-- LOLLO NOTE there can be 1 terminal 4 1 vehicle node,
							-- n terminals 4 1 person edge,
							-- n terminals 4 1 person node
							-- vehicleNodeOverride = #params.terminals[t].trackEdgeLists - 1
							vehicleNodeOverride = terminateConstructionHookInfo.vehicleNodes[t]
						}
					)

					local modelIndexesBase0 = {}
					for i = 1, #result.models do
						if slotHelpers.getTerminalFromModelTag(result.models[i].tag) == t then
							modelIndexesBase0[#modelIndexesBase0+1] = i - 1
						-- elseif result.models[i].slotId ~= nil then
						-- 	local nTerminal, _, _ = slotHelpers.demangleId(result.models[i].slotId)
						-- 	if nTerminal == t then
						-- 		modelIndexesBase0[#modelIndexesBase0+1] = i - 1
						-- 	end
						end
					end
					for _, modelIndex in pairs(modelIndexesBase0) do
						-- table.insert(result.terminalGroups[#result.terminalGroups].terminals, {modelIndex, t - 1}) -- NO!
						table.insert(result.terminalGroups[#result.terminalGroups].terminals, {modelIndex, 0})
					end

					local stationIndex = arrayUtils.findIndex(result.stations, 'tag', isCargoTerminal and 0 or 1)
					table.insert(result.stations[stationIndex].terminals, t - 1)
				end

				local _linkUnderpasses = function()
					-- link the underpasses along terminals, underground
					for t = 1, #params.terminals do
						local positionsInTerminal = terminateConstructionHookInfo.underpassPositions[t]
						if positionsInTerminal ~= nil and #positionsInTerminal > 1 then
							local previousPosition = positionsInTerminal[1]
							for i = 2, #positionsInTerminal do
								local currentPosition = positionsInTerminal[i]
								result.models[#result.models+1] = {
									id = _constants.passengerLaneModelId,
									-- tag = slotHelpers.mangleModelTag(t, false),
									transf = moduleHelpers.get1MLaneTransf(
										previousPosition.posBottom,
										currentPosition.posBottom
									)
								}
								previousPosition = currentPosition
							end
						end
					end

					-- link the underpasses across terminals, underground
					-- for now, I link each terminal to 1 other terminal only, the closest with an underpass.
					local _getDistances = function()
						-- local allDistances = {}
						local minDistances = {}
						for t = 1, #params.terminals do
							local positionsInT = terminateConstructionHookInfo.underpassPositions[t]
							if positionsInT ~= nil then
								for i = 1, #positionsInT do
									for tt = t + 1, #params.terminals do
										local positionsInTT = terminateConstructionHookInfo.underpassPositions[tt]
										if positionsInTT ~= nil then
											for ii = 1, #positionsInTT do
												-- if allDistances[t] == nil then allDistances[t] = {} end
												-- if allDistances[t][tt] == nil then allDistances[t][tt] = {} end
												if minDistances[t] == nil then minDistances[t] = {} end

												local distance = edgeUtils.getVectorLength(
													{
														positionsInT[i].posBottom[1] - positionsInTT[ii].posBottom[1],
														positionsInT[i].posBottom[2] - positionsInTT[ii].posBottom[2],
														positionsInT[i].posBottom[3] - positionsInTT[ii].posBottom[3],
													}
												)
												-- table.insert(
												-- 	allDistances[t][tt],
												-- 	{
												-- 		t = t,
												-- 		tt = tt,
												-- 		i = i,
												-- 		ii = ii,
												-- 		distance = distance
												-- 	}
												-- )

												if minDistances[t][tt] == nil or minDistances[t][tt].distance > distance then
													minDistances[t][tt] = {
														t = t,
														tt = tt,
														i = i,
														ii = ii,
														distance = distance
													}
												end
											end
										end
									end
								end
							end
						end

						-- return allDistances, minDistances
						return minDistances
					end
					-- local allDistances, minDistances = _getDistances()
					local minDistances = _getDistances()
					-- print('allDistances =') debugPrint(allDistances)
					-- print('minDistances =') debugPrint(minDistances)

					for t = 1, #params.terminals do
						local positionsInT = terminateConstructionHookInfo.underpassPositions[t]
						if positionsInT ~= nil then
							local minDistance4T = nil
							for tt = t + 1, #params.terminals do
								local positionsInTT = terminateConstructionHookInfo.underpassPositions[tt]
								if positionsInTT ~= nil then
									if minDistances[t][tt] ~= nil then
										if minDistance4T == nil or minDistances[t][tt].distance < minDistance4T.distance then
											minDistance4T = minDistances[t][tt]
										end
									end
								end
							end
							if minDistance4T ~= nil then
								result.models[#result.models+1] = {
									id = _constants.passengerLaneModelId,
									-- tag = slotHelpers.mangleModelTag(t, false),
									transf = moduleHelpers.get1MLaneTransf(
										terminateConstructionHookInfo.underpassPositions[minDistance4T.t][minDistance4T.i].posBottom,
										terminateConstructionHookInfo.underpassPositions[minDistance4T.tt][minDistance4T.ii].posBottom
									)
								}
							end
						end
					end
				end
				_linkUnderpasses()
				-- avoid dump when configuring
				-- if #(result.stations[1].terminals) == 0 then
				-- 	print('avoiding dump when configuring')
				-- 	table.insert(result.stations[1].terminals, 0)
				-- 	print('result.stations =') debugPrint(result.stations)
				-- end

				-- it should output something like (this example has one terminal made of two adjacent bits)
				-- stock result.stations =
				-- 	{
				-- 		{
				-- 			tag = 0, -- in the stock station, this is 0 for cargo and 1 for passengers
				-- 			terminals = { 0 } -- 0 is the position of the linked terminal group, in base 0
				-- 		}
				-- 	}
				-- stock result.terminalGroups =
				-- {
				-- 	{
				-- 		tag = -1, -- possibly useless, try to keep them all different tho
				-- 		terminals = {
				-- 			{ 22, 0 }, -- 22 is the position of a model with a terminal, in base 0
				-- 			{ 25, 0 }, -- 0 is always 0 in the stock station, it is something like a terminal number
				-- 		}
				-- 	}
				-- }

				-- print('LOLLO lollo_freestyle_train_station leaving terminateConstructionHook')
				-- print('LOLLO result = ') debugPrint(result)
				-- print('LOLLO result.stations = ') debugPrint(result.stations)
				-- print('LOLLO result.models = ') debugPrint(result.models)
				-- print('LOLLO result.terminalGroups = ') debugPrint(result.terminalGroups)

				local _testTerrainAlignment = function()
					if result.terrainAlignmentLists == nil or #result.terrainAlignmentLists == 0 then
						-- LOLLO TODO run this on every rectangle between leftLane and rightLane
						-- Otherwise, the game will make ugly colliding embankments below bridges and above underground bits

						result.terrainAlignmentLists = {
							{
								type = 'LESS', -- accepted values: "EQUAL", "LESS" or "GREATER". Use GREATER underground and LESS on bridges
								faces = {
									-- {
									-- 	{10.1, -0.1, 0.0, 1.0},
									-- 	{10.1, 0.1, 0.0, 1.0},
									-- 	{9.9, 0.1, 0.0, 1.0},
									-- 	{9.9, -0.1, 0.0, 1.0}
									-- }
									{
										{100, -50, -20},
										{100, 50, -20},
										{-100, 50, -20},
										{-100, -50, -20}
									}
								},
								optional = true,
								slopeHigh = 999, --LOLLO added this
								slopeLow = 0 --LOLLO added this
							}
						}
					end
				end
				-- _testTerrainAlignment()
			end -- end of terminateConstructionHook()

			-- print('freestyleTrainStation result =') debugPrint(result)
			print('freestyleTrainStation result.terrainAlignmentLists =') debugPrint(result.terrainAlignmentLists)
			return result
		end,
 		-- preProcessFn = function(modules, change, three)
		-- 	-- this fires when the user adds or removes a module
		-- 	print('LOLLO preProcessFn')
		-- 	print('modules =') debugPrint(modules)
		-- 	print('change =') debugPrint(change)
		-- 	-- default behaviour
		-- 	if change.added then
		-- 		modules[change.slotId] = change.module
		-- 	else
		-- 		modules[change.slotId] = nil
		-- 	end
		-- 	-- airport behaviour
		-- 	-- if change.added then
		-- 	-- 	if change.slotId == landingSlotId + 1 then
		-- 	-- 		modules[landingSlotId + 0] = nil
		-- 	-- 	elseif change.slotId == landingSlotId + 0 then
		-- 	-- 		modules[landingSlotId + 1] = nil
		-- 	-- 	elseif change.slotId == landingSlotId + 2 then
		-- 	-- 		modules[landingSlotId + 3] = nil
		-- 	-- 	elseif change.slotId == landingSlotId + 3 then
		-- 	-- 		modules[landingSlotId + 2] = nil
		-- 	-- 	end
		-- 	-- 	modules[change.slotId] = change.module
		-- 	-- else
		-- 	-- 	modules[change.slotId] = nil
		-- 	-- end
		-- 	return modules
        -- end,
        upgradeFn = function(args, one)
            -- LOLLO TODO allow upgrading tracks.
            -- this sample is from the modular station, which puts edges in modules.
            -- I don't coz they are curved, so see what I can do.
			print('LOLLO upgradeFn starting, args =') debugPrint(args)
			print('one = ') debugPrint(one)
            local modules = {}

            local SwapModule = function(slotId, from, to)
                if args.modules[slotId] and args.modules[slotId].name == from then
                    table.insert(modules, {slotId, to})
                    return true
                end
                return false
            end
            local SwapRow = function(slotId, from, to)
                local slotId2 = slotId
                while SwapModule(slotId2, from, to) do 
                    slotId2 = slotId2 + 10
                end
                slotId2 = slotId
                while SwapModule(slotId2, from, to) do 
                    slotId2 = slotId2 - 10
                end
            end

            if args.modules[args.slotId] == nil then return {} end

            if args.catenaryToggle == 1 then 
                SwapRow(args.slotId, "station/rail/modular_station/platform_high_speed_track.module",
                    "station/rail/modular_station/platform_high_speed_track_catenary.module")
                SwapRow(args.slotId, "station/rail/modular_station/platform_track.module",
                    "station/rail/modular_station/platform_track_catenary.module")
                SwapRow(args.slotId, "station/rail/modular_station/platform_high_speed_track_catenary.module", 
                    "station/rail/modular_station/platform_high_speed_track.module")
                SwapRow(args.slotId, "station/rail/modular_station/platform_track_catenary.module", 
                    "station/rail/modular_station/platform_track.module")
            end
            if args.trackTypeToggle == 1 then 
                SwapRow(args.slotId, "station/rail/modular_station/platform_high_speed_track.module",
                    "station/rail/modular_station/platform_track.module")
                SwapRow(args.slotId, "station/rail/modular_station/platform_track.module",
                    "station/rail/modular_station/platform_high_speed_track.module")
                SwapRow(args.slotId, "station/rail/modular_station/platform_high_speed_track_catenary.module",
                    "station/rail/modular_station/platform_track_catenary.module")
                SwapRow(args.slotId, "station/rail/modular_station/platform_track_catenary.module",
                    "station/rail/modular_station/platform_high_speed_track_catenary.module")
            end

            return modules
        end,
	}
end