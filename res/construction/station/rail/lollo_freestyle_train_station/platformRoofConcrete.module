local _constants = require('lollo_freestyle_train_station.constants')
-- local constructionutil = require "constructionutil"
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
local modulesutil = require "modulesutil"
local slotHelpers = require('lollo_freestyle_train_station.slotHelpers')
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require "transf"
local vec3 = require "vec3"


function data()
return {
	availability = {
		yearFrom = 0,
		yearTo = 0
	},
	category = {
		categories = { "passenger-platform-roofs", },
	},
	cost = {
		price = 0,
	},
	description = {
		name = _("PlatformRoofConcreteName"),
		description = _("PlatformRoofConcreteDesc"),
		icon = "ui/empty.tga"
	},
	metadata = { },
	order = {
		value = 11,
	},
	type = _constants.platformRoofModuleType,
	updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, updateScriptParams)
		local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
		if not nTerminal or not nTrackEdge or not baseId then return end

		local isTrackOnPlatformLeft = params.terminals[nTerminal].isTrackOnPlatformLeft
		local transfXZoom = isTrackOnPlatformLeft and -1 or 1
		local transfYZoom = isTrackOnPlatformLeft and -1 or 1

		local inverseMainTransf = transfUtils.getInverseTransf(params.mainTransf)

		local ii1 = nTrackEdge - 1
		local iiN = nTrackEdge + 1
		local ceilingCounter = -2
		for ii = 1, #params.terminals[nTerminal].centrePlatformsFine do
			local cpf = params.terminals[nTerminal].centrePlatformsFine[ii]
			local leadingIndex = cpf.leadingIndex
			if leadingIndex > iiN then break end
			if leadingIndex >= ii1 then
			-- if leadingIndex >= ii1
			-- and leadingIndex <= iiN then
				local platformWidth = params.terminals[nTerminal].centrePlatforms[leadingIndex].width
				local ceilingModelId = platformWidth < 5 and _constants.platformRoofConcreteCeiling2_5MModelFileName or _constants.platformRoofConcreteCeiling5MModelFileName

				local cpfPosTanX2 = transfUtils.getPosTanX2Transformed(cpf.posTanX2, inverseMainTransf)
				local myTransf = transfUtilsUG.mul(
					moduleHelpers.getPlatformObjectTransf_WithYRotation(cpfPosTanX2),
					{ transfXZoom, 0, 0, 0,  0, transfYZoom, 0, 0,  0, 0, 1, 0,  0, 0, _constants.platformRoofZ, 1 }
				)
				result.models[#result.models+1] = {
					id = ceilingModelId,
					transf = myTransf,
					tag = tag
				}

				ceilingCounter = ceilingCounter + 1
				if params.terminals[nTerminal].centrePlatformsFine[ii + 2]
				and params.terminals[nTerminal].centrePlatformsFine[ii + 2].leadingIndex <= iiN
				and math.fmod(ceilingCounter, 4) == 0 then
					local pillarModelId = platformWidth < 5 and _constants.platformRoofConcretePillar2_5MModelFileName or _constants.platformRoofConcretePillar5MModelFileName
					result.models[#result.models+1] = {
						id = pillarModelId,
						transf = myTransf,
						tag = tag,
					}
				end
			end
		end
	end,

	getModelsFn = function(params)
		local results = {}
		for y = -2, 2 do
			results[#results+1] = {
				id = _constants.platformRoofConcreteCeiling2_5MModelFileName,
				transf = {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, y, 0, 1},
			}
		end
		results[#results+1] = {
			id = _constants.platformRoofConcretePillar2_5MModelFileName,
			transf = {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, 0, 0, 1},
		}
	return results
	end
}

end
