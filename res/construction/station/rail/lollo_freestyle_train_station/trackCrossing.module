local _constants = require('lollo_freestyle_train_station.constants')
-- local constructionutil = require "constructionutil"
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
-- local modulesutil = require "modulesutil"
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require "transf"


function data()
	return {
		availability = {
			yearFrom = 0,
			yearTo = 0
		},
		category = {
			categories = { "track-crossings", },
		},
		cost = {
			price = 0,
		},
		description = {
			name = _("TrackCrossingName"),
			description = _("TrackCrossingDesc"),
			icon = "ui/lollo_freestyle_train_station/trackCrossing.tga"
		},
		metadata = { },
		order = {
			value = 60,
		},
		type = _constants.trackCrossingModuleType,
		updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, updateScriptParams)
			local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
			if not nTerminal or not nTrackEdge or not baseId then return end

			local eraPrefix = moduleHelpers.getEraPrefix(params, nTerminal, nTrackEdge)
			local modelId = nil
			if eraPrefix == moduleHelpers.eras.era_a.prefix then modelId = 'lollo_freestyle_train_station/railroad/trackCrossing/era_a_trackCrossing.mdl'
			elseif eraPrefix == moduleHelpers.eras.era_b.prefix then modelId = 'lollo_freestyle_train_station/railroad/trackCrossing/era_b_trackCrossing.mdl'
			else modelId = 'lollo_freestyle_train_station/railroad/trackCrossing/era_c_trackCrossing.mdl'
			end
			result.models[#result.models + 1] = {
				id = modelId,
				slotId = slotId,
				transf = slotTransf,
				tag = tag
			}

			-- add link to platform
			local trackCrossingPos = transfUtils.getPositionRaisedBy(transfUtils.transf2Position(slotTransf), _constants.trackCrossingZ)
			local crossConnectorPos = params.terminals[nTerminal].crossConnectorsRelative[nTrackEdge].posTanX2[1][1]
			result.models[#result.models+1] = {
				id = _constants.passengerLaneLinkableModelId,
				transf = transfUtils.get1MLaneTransf(
					trackCrossingPos,
					transfUtils.getPositionRaisedBy(crossConnectorPos, result.laneZs[nTerminal])
				)
			}
			if result.terminateConstructionHookInfo.trackCrossingPositions[nTerminal] == nil then
				result.terminateConstructionHookInfo.trackCrossingPositions[nTerminal] = {}
			end
			table.insert(
				result.terminateConstructionHookInfo.trackCrossingPositions[nTerminal],
				{
					t = nTerminal,
					-- lanePosTanX2 = params.terminals[nTerminal].centrePlatformsRelative[nTrackEdge].posTanX2,
					pos = trackCrossingPos
				}
			)
		end,

		getModelsFn = function(params)
			return {
				{
					id = 'lollo_freestyle_train_station/railroad/trackCrossing/era_c_trackCrossing.mdl',
					transf = _constants.idTransf,
				},
			}
		end
	}
end
