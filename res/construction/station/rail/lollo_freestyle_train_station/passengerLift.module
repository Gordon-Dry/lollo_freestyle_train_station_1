local _constants = require('lollo_freestyle_train_station.constants')
-- local constructionutil = require "constructionutil"
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
local modulesutil = require "modulesutil"
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require "transf"
local vec3 = require "vec3"


function data()

return {
	availability = {
		yearFrom = 0,
		yearTo = 0
	},
	category = {
		categories = { "street access", },
	},
	cost = {
		price = 0,
	},
	description = {
		name = _("PassengerLiftName"),
		description = _("PassengerLiftDesc"),
		icon = "ui/construction/station/street/cargo_area_inner_12x12.tga"
	},
	metadata = { },
	order = {
		value = 1,
	},
	type = _constants.passengerLiftModuleType,
	updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, updateScriptParams)
		local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
		if not nTerminal or not nTrackEdge or not baseId then return end

		local cpl = params.terminals[nTerminal].centrePlatforms[nTrackEdge]
		-- local terrainHeight = cpl.terrainHeight1
		local bridgeHeight = cpl.posTanX2[1][1][3] - cpl.terrainHeight1

		-- LOLLO NOTE tag looks like '__module_201030', never mind what you write into it, the game overwrites it
		-- in base_config.lua
		-- Set it into the models so the game knows what module they belong to.

		-- result.models[#result.models + 1] = {
		-- 	id = 'lollo_freestyle_train_station/icon/green.mdl',
		-- 	slotId = slotId,
		-- 	transf = transfUtilsUG.mul(
		-- 		slotTransf,
		-- 		{ 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, 0, -terrainHeight, 1 }
		-- 	),
		-- 	tag = tag
		-- }

		-- print('terrainHeight =', terrainHeight)
		-- print('bridgeHeight =', bridgeHeight)
		local buildingModelId = 'lollo_freestyle_train_station/lift/'
		local buildingHeight = 0
		if bridgeHeight < 5 then
			buildingModelId = buildingModelId .. 'elevated_stairs_5.mdl'
			buildingHeight = 5
		elseif bridgeHeight < 10 then
			buildingModelId = buildingModelId .. 'elevated_stairs_10.mdl'
			buildingHeight = 10
		elseif bridgeHeight < 15 then
			buildingModelId = buildingModelId .. 'elevated_stairs_15.mdl'
			buildingHeight = 15
		elseif bridgeHeight < 20 then
			buildingModelId = buildingModelId .. 'elevated_stairs_20.mdl'
			buildingHeight = 20
		elseif bridgeHeight < 25 then
			buildingModelId = buildingModelId .. 'elevated_stairs_25.mdl'
			buildingHeight = 25
		elseif bridgeHeight < 30 then
			buildingModelId = buildingModelId .. 'elevated_stairs_30.mdl'
			buildingHeight = 30
		elseif bridgeHeight < 35 then
			buildingModelId = buildingModelId .. 'elevated_stairs_35.mdl'
			buildingHeight = 35
		elseif bridgeHeight < 40 then
			buildingModelId = buildingModelId .. 'elevated_stairs_40.mdl'
			buildingHeight = 40
		else
			-- addModuleFn('elevated_stairs.mdl', stationTransf)
			return
		end
		-- print('buildingModelId =', buildingModelId)
		-- print('buildingHeight =', buildingHeight)
		result.models[#result.models + 1] = {
			id = buildingModelId,
			slotId = slotId,
			transf = transfUtilsUG.mul(
				slotTransf,
				{ 0, 1, 0, 0,  -1, 0, 0, 0,  0, 0, 1, 0,  0, 0, -0.8, 1 }
			),
			tag = tag
		}

		local groundFace = { -- the ground faces ignore z, the alignment lists don't
			{-1, -6.2, -buildingHeight -0.8, 1},
			{-1, 6.2, -buildingHeight -0.8, 1},
			{6.0, 6.2, -buildingHeight -0.8, 1},
			{6.0, -6.2, -buildingHeight -0.8, 1},
		}
		modulesutil.TransformFaces(slotTransf, groundFace)
		table.insert(
			result.groundFaces,
			{
				face = groundFace,
				modes = {
					{
						type = 'FILL',
						key = 'shared/asphalt_01.gtex.lua' --'shared/asphalt_01.gtex.lua'
					},
					--[[                         {
						type = 'STROKE_INNER',
						key = 'shared/asphalt_01.gtex.lua',
					},
					]]
					{
						type = 'STROKE_OUTER',
						key = 'shared/asphalt_01.gtex.lua' --'street_border.lua'
					}
				}
			}
		)

		local terrainAlignmentList = {
			faces = { groundFace },
			optional = true,
        	slopeHigh = 99,
        	slopeLow = 0.9, --0.1,
			type = 'EQUAL',
		}
		result.terrainAlignmentLists[#result.terrainAlignmentLists + 1] = terrainAlignmentList
	end,

	getModelsFn = function(params)
		return {
			{
				id = 'lollo_freestyle_train_station/lift/elevated_stairs_20.mdl',
				transf = { 0, 1, 0, 0,  -1, 0, 0, 0,  0, 0, 1, 0,  0, 0, 0, 1 },
			},
		}
	end
}

end
