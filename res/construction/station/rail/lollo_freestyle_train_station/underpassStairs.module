local _constants = require('lollo_freestyle_train_station.constants')
-- local constructionutil = require "constructionutil"
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
local modulesutil = require "modulesutil"
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require "transf"
local vec3 = require "vec3"


function data()

return {
	availability = {
		yearFrom = 0,
		yearTo = 0
	},
	category = {
		categories = { "passenger-up-and-down", },
	},
	cost = {
		price = 0,
	},
	description = {
		name = _("UnderpassStairsName"),
		description = _("UnderpassStairsDesc"),
		icon = "ui/lollo_freestyle_train_station/underpassStairs.tga"
	},
	metadata = { },
	order = {
		value = 41,
	},
	type = _constants.underpassModuleType,
	updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, updateScriptParams)
		local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
		if not nTerminal or not nTrackEdge or not baseId then return end

		local cpl = params.terminals[nTerminal].centrePlatformsRelative[nTrackEdge]
		slotTransf = transfUtilsUG.mul(
			moduleHelpers.getPlatformObjectTransf_WithYRotation(cpl.posTanX2),
			{ 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, 0, result.laneZs[nTerminal], 1 }
		)

		local era = moduleHelpers.getEraPrefix(params, nTerminal, nTrackEdge)
		local modelId = nil
		if era == moduleHelpers.eras.era_a.prefix then modelId = 'lollo_freestyle_train_station/underpass/era_a_underpass_stairs_10m.mdl'
		elseif era == moduleHelpers.eras.era_b.prefix then modelId = 'lollo_freestyle_train_station/underpass/era_b_underpass_stairs_10m.mdl'
		else modelId = 'lollo_freestyle_train_station/underpass/era_c_underpass_stairs_10m.mdl'
		end

		result.models[#result.models + 1] = {
			id = modelId,
			slotId = slotId,
			transf = slotTransf,
			tag = tag
		}

		local groundFace = { -- the ground faces ignore z, the alignment lists don't
			{-4.5, -0.75, 0, 1},
			{-4.5, 0.75, 0, 1},
			{4.5, 0.75, 0, 1},
			{4.5, -0.75, 0, 1},
		}
		modulesutil.TransformFaces(slotTransf, groundFace)
		table.insert(
			result.groundFaces,
			{
				face = groundFace,
				loop = true,
				modes = {
					{
						-- key = 'lollo_freestyle_train_station/hole.lua',
						key = 'hole.lua',
						type = 'FILL',
					},
					-- {
					-- 	key = groundFacesStrokeOuterKey,
					-- 	type = 'STROKE_OUTER',
					-- }
				}
			}
		)
	end,

	getModelsFn = function(params)
		return {
			{
				id = 'lollo_freestyle_train_station/underpass/era_c_underpass_stairs_10m.mdl',
				transf = transfUtilsUG.transl(vec3.new(0.0, 0.0, 0.0)),
			},
		}
	end
}

end
