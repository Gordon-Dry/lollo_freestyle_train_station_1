function data()
    local arrayUtils = require('lollo_freestyle_train_station.arrayUtils')
    local _autoBridgePathsHelper = require('lollo_freestyle_train_station.autoBridgePathsHelper')
    local _constants = require('lollo_freestyle_train_station.constants')
    local logger = require('lollo_freestyle_train_station.logger')
    local _openLiftOpenStairsHelpers = require('lollo_freestyle_train_station.openLiftOpenStairsHelpers')

    local function _myErrorHandler(err)
        print('lollo openLiftFree_v2.con ERROR: ', err)
    end

    local _paramValues = _openLiftOpenStairsHelpers.paramValues.lift_v2
    local _paramReaders = _openLiftOpenStairsHelpers.paramReaders.lift_v2

	return {
        type = 'ASSET_DEFAULT',
		description = {
			name = _('OpenLiftFreeName'),
			description = _('OpenLiftFreeDesc'),
            icon = 'ui/construction/station/rail/lollo_freestyle_train_station/openLiftFree.tga'
		},
		availability = {
			yearFrom = 0,
			yearTo = 0,
		},
        categories = { 'stairs' },
		order = 999,
		autoRemovable = false,
        -- buildMode = 'MULTI',
		skipCollision = false, -- true,
        params = _openLiftOpenStairsHelpers.getOpenLiftParamsMetadata(),
		updateFn = function(params)
            logger.print('openLiftFree_v2.updateFn firing, params = ') logger.debugPrint(arrayUtils.cloneDeepOmittingFields(params, {'state'}))
            -- local _bridgeMode = _paramReaders.getBridgeMode(params)
            local _baseMode = _paramReaders.getBaseMode(params)
            local _bridgeChunkLengthNorth = _paramReaders.getBridgeChunkLengthNorth(params)
            local _bridgeChunkLengthSouth = _paramReaders.getBridgeChunkLengthSouth(params)
            -- When you connect two bridges and fiddle around, one will snap and the other not.
            -- This forces both to snap
            local _isSnapTop = (_bridgeChunkLengthNorth == 1 or _bridgeChunkLengthNorth == 3 or _bridgeChunkLengthSouth == 1 or _bridgeChunkLengthSouth == 3)
            local _era_prefix = _paramReaders.getEraPrefix(params)
            local _height = _paramReaders.getHeight(params)
            -- local _sinYAngle = _paramReaders.getSinYAngle(params)
            local _autoBridgePathsRefData = _autoBridgePathsHelper.getData4Era(_era_prefix)
            local _groundFacesFillKey = _constants[_era_prefix .. 'groundFacesFillKey']

            local result = {
                colliders = {},
                cost = 0,
                edgeLists = {},
                groundFaces = {
                    {
                        face = {
                            {-2, -3.2, 0, 1}, {-2, 3.2, 0, 1}, {2, 3.2, 0, 1}, {2, -3.2, 0, 1}
                        },
                        loop = true,
                        modes = {
                            {
                                key = _groundFacesFillKey,
                                type = 'FILL',
                            },
                        },
                    },
                    -- {
                    --     face = faces[1],
                    --     loop = true,
                    --     modes = {
                    --         {
                    --             -- key = 'lollo_freestyle_train_station/hole.lua',
                    --             key = 'hole.lua',
                    --             type = 'FILL',
                    --         },
                    --     }
                    -- }
                },
                models = {
                    -- {
                    --     id = 'lollo_freestyle_train_station/icon/red_huge.mdl',
                    --     transf = {0, 1, 0, 0,  -1, 0, 0, 0,  0, 0, 1, 0,  0, 0, 0, 1},
                    -- },
                    {
                        id = (_baseMode == -1
                            and 'lollo_freestyle_train_station/open_lift_free_passenger_lanes/bottom_for_tp.mdl'
                            or 'lollo_freestyle_train_station/open_lift_free_passenger_lanes/bottom_for_edges.mdl'),
                        transf = _constants.idTransf,
                    },
                    {
                        id = 'lollo_freestyle_train_station/open_lift_free_passenger_lanes/bottom_to_top_1m_v2.mdl',
                        transf = {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, _height, 0,  0, 0, 0, 1},
                    },
                },
                terrainAlignmentLists = {
                    {
                        type = 'EQUAL',
                        optional = true, -- set this to true if the alignment must not throw collision errors when competing against other terrain alignments in the same construction
                        slopeLow = 9.6,
                        slopeHigh = 9.9,
                        faces = { {
                            {-2, -3.2, 0}, {-2, 3.2, 0}, {2, 3.2, 0}, {2, -3.2, 0},
                            -- {2, -3.2, 0}, {2, 3.2, 0}, {-2, 3.2, 0}, {-2, -3.2, 0},
                        } },
                    },
                },
            }

            local _addBase = function()
                local _bridgeLen = 0.9
                local edges1 = {
                    { { 0, -_bridgeLen -1.5, 0 }, { 0, _bridgeLen, 0 } },  -- node 0 pos, tan
                    { { 0, -1.5, 0 }, { 0, _bridgeLen, 0 } },  -- node 1 pos, tan
                }
                local edges2 = {
                    { { 0, 1.5, 0 }, { 0, _bridgeLen, 0 } },  -- node 0 pos, tan
                    { { 0, 1.5 + _bridgeLen, 0 }, { 0, _bridgeLen, 0 } },  -- node 1 pos, tan
                }
                if _baseMode == 0 or _baseMode == 1 then -- edge or snappy edge
                    table.insert(
                        result.edgeLists,
                        {
                            alignTerrain = true,
                            edges = edges1,
                            freeNodes = { 0 },
                            params = {
                                tramTrackType  = 'NO',
                                type = _autoBridgePathsRefData.streetTypeName_noBridge,
                            },
                            snapNodes = _baseMode == 0 and { } or { 0 },
                            -- tag2nodes = {},
                            type = 'STREET'
                        }
                    )
                    table.insert(
                        result.edgeLists,
                        {
                            alignTerrain = true,
                            edges = edges2,
                            freeNodes = { 1 },
                            params = {
                                tramTrackType  = 'NO',
                                type = _autoBridgePathsRefData.streetTypeName_noBridge,
                            },
                            snapNodes = _baseMode == 0 and { } or { 1 },
                            -- tag2nodes = {},
                            type = 'STREET'
                        }
                    )
                elseif _baseMode == 2 or _baseMode == 3 then -- bridge or snappy bridge
                    table.insert(
                        result.edgeLists,
                        {
                            alignTerrain = false,
                            edges = edges1,
                            edgeType = 'BRIDGE',
                            edgeTypeName = _autoBridgePathsRefData.bridgeTypeName_noRailing,
                            freeNodes = { 0 },
                            params = {
                                tramTrackType  = 'NO',
                                type = _autoBridgePathsRefData.streetTypeName_noBridge,
                            },
                            snapNodes = _baseMode == 2 and { } or { 0 },
                            -- tag2nodes = {},
                            type = 'STREET'
                        }
                    )
                    table.insert(
                        result.edgeLists,
                        {
                            alignTerrain = false,
                            edges = edges2,
                            edgeType = 'BRIDGE',
                            edgeTypeName = _autoBridgePathsRefData.bridgeTypeName_noRailing,
                            freeNodes = { 1 },
                            params = {
                                tramTrackType  = 'NO',
                                type = _autoBridgePathsRefData.streetTypeName_noBridge,
                            },
                            snapNodes = _baseMode == 2 and { } or { 1 },
                            -- tag2nodes = {},
                            type = 'STREET'
                        }
                    )
                end
            end

            local _addModels = function()
                local _bodyHeight = 2 -- comes from the meshes
                local _bottomHeight = 6 -- comes from the meshes
                local _bodyCount = math.floor((_height -_bottomHeight) / _bodyHeight)
                local _topZ = _height
                table.insert(
                    result.models,
                    {
                        id = 'lollo_freestyle_train_station/open_lifts_free/' .. _era_prefix .. 'open_lift_free_bottom.mdl',
                        transf = {0, 1, 0, 0,  -1, 0, 0, 0,  0, 0, 1, 0,  0, 0, 0, 1},
                    }
                )
                table.insert(
                    result.models,
                    {
                        id = 'lollo_freestyle_train_station/open_lifts_free/' .. _era_prefix .. 'open_lift_free_top.mdl',
                        transf = {0, 1, 0, 0,  -1, 0, 0, 0,  0, 0, 1, 0,  0, 0, _topZ, 1},
                    }
                )
                for i = 1, _bodyCount, 1 do
                    table.insert(
                        result.models,
                        {
                            id = 'lollo_freestyle_train_station/open_lifts_free/' .. _era_prefix .. 'open_lift_free_body.mdl',
                            transf = {0, 1, 0, 0,  -1, 0, 0, 0,  0, 0, 1, 0,  0, 0, _bottomHeight + (i-1) * _bodyHeight, 1},
                        }
                    )
                end
            end

            local _addTop = function(isNorth, bridgeChunkLength)
                logger.print('isNorth, bridgeChunkLength, _height =', isNorth, bridgeChunkLength, _height)
                if bridgeChunkLength == -1 then return end

                local _topLanesModelId = 'lollo_freestyle_train_station/open_lift_free_passenger_lanes/top_unlinkable_fork.mdl'
                -- local _topLanesModelId = 'lollo_freestyle_train_station/open_stairs_free_passenger_lanes/passenger_lane_free_open_stairs_top_unlinkable_fork_'.. _height ..'m.mdl'
                if isNorth then
                    result.models[#result.models+1] = {
                        id = _topLanesModelId,
                        transf = {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, 0, _height, 1},
                    }
                else
                    result.models[#result.models+1] = {
                        id = _topLanesModelId,
                        transf = {-1, 0, 0, 0,  0, -1, 0, 0,  0, 0, 1, 0,  0, 0, _height, 1},
                    }
                end

                local edges
                local _zShift = 0
                if isNorth then
                    edges = {
                        { { 0.3, 0, _height }, { 1, 0, _zShift } },  -- node 0 pos, tan
                        { { 1.3, 0, _height + _zShift}, { 1, 0, _zShift } },  -- node 1 pos, tan
                    }
                else
                    edges = {
                        { { -0.3, 0, _height }, { -1, 0, _zShift } },  -- node 0 pos, tan
                        { { -1.3, 0, _height + _zShift}, { -1, 0, _zShift } },  -- node 1 pos, tan
                    }
                end

                table.insert(
                    result.edgeLists,
                    {
                        alignTerrain = false, -- only align on ground and in tunnels
                        edges = edges,
                        edgeType = 'BRIDGE',
                        -- edgeTypeName = _autoBridgePathsRefData.bridgeTypeName_noRailing,
                        edgeTypeName = _autoBridgePathsRefData.bridgeTypeName_withRailing,
                        freeNodes = { 1 },
                        params = {
                            tramTrackType  = 'NO',
                            type = _autoBridgePathsRefData.streetTypeName_noBridge,
                        },
                        snapNodes = (_isSnapTop or bridgeChunkLength ~= 2) and { 1 } or { },
                        -- tag2nodes = {},
                        type = 'STREET'
                    }
                )
--[[
                -- adjust the terrain so it does not cover the bridge
                local _zed = _height - 1
                local _yHalfSize = 1
                local _faces = {{
                    { -_yHalfSize, _bridgeStartY, _zed}, { -_yHalfSize, _bridgeEndY, _zed},
                    { _yHalfSize, _bridgeEndY, _zed}, { _yHalfSize, _bridgeStartY, _zed},
                }}
                logger.print('bridge faces =') logger.debugPrint(_faces)
                table.insert(
                    result.terrainAlignmentLists,
                    {
                        type = 'LESS',
                        optional = true,
                        slopeLow = 9.6,
                        slopeHigh = 9.9,
                        faces =  _faces
                    }
                )
]]
            end

            xpcall(
                function()
                    _addBase()
                    _addModels()
                    _addTop(true, _bridgeChunkLengthNorth)
                    _addTop(false, _bridgeChunkLengthSouth)
                end,
                _myErrorHandler
            )
            -- print('result.models =') debugPrint(result.models)
			return result
		end,

        upgradeFn = function(params)
            return {}
        end,
	}
end
