local _constants = require('lollo_freestyle_train_station.constants')
-- local constructionutil = require "constructionutil"
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
-- local modulesutil = require "modulesutil"
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require "transf"
local vec3 = require "vec3"


function data()

return {
	availability = {
		yearFrom = -1,
		yearTo = -1
	},
	category = {
		-- categories = { "cargo", },
	},
	cost = {
		price = 0,
	},
	description = {
		name = _("Terminal"),
		description = _("Terminal, can only be deleted, build this with the waypoints"),
		icon = "ui/empty.tga"
	},
	metadata = { },
	order = {
		value = 1,
	},
	-- skipCollision = true,
	type = _constants.cargoTerminalModuleType,
	updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, updateScriptParams)
		local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
		if not nTerminal or not baseId then return end

		moduleHelpers.edges.addEdges(result, tag, params, nTerminal)
		-- print('freestyleTrainStation result.edgeLists =') debugPrint(result.edgeLists)

		result.models[#result.models + 1] = {
			id = 'lollo_freestyle_train_station/asset/terminal_signal.mdl',
			slotId = slotId,
			transf = slotTransf,
			tag = tag
		}

		-- start from 3 to avoid deco peeping out of the platform
		local isTrackOnPlatformLeft = params.terminals[nTerminal].isTrackOnPlatformLeft
		for i = 3, #params.terminals[nTerminal].centrePlatformsRelative - 1, 3 do
			local cpl = params.terminals[nTerminal].centrePlatformsRelative[i]
			local platformWidth = cpl.width
			local yShift = isTrackOnPlatformLeft and platformWidth * 0.5 - 0.2 or -platformWidth * 0.5 + 0.2
			local transf = moduleHelpers.getTerminalDecoTransf(cpl.posTanX2)
			result.models[#result.models + 1] = {
				id = 'lollo_freestyle_train_station/asset/cargo_name_board.mdl',
				slotId = slotId,
				transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, yShift, 0, 1 }),
				tag = tag
			}
		end
		for i = 4, #params.terminals[nTerminal].centrePlatformsRelative - 1, 3 do
			local cpl = params.terminals[nTerminal].centrePlatformsRelative[i]
			local platformWidth = cpl.width
			local yShift = isTrackOnPlatformLeft and platformWidth * 0.5 - 0.2 or -platformWidth * 0.5 + 0.2
			local transf = moduleHelpers.getTerminalDecoTransf(cpl.posTanX2)
			result.models[#result.models + 1] = {
				id = 'lollo_freestyle_train_station/asset/cargo_perron_number.mdl',
				slotId = slotId,
				transf = transfUtilsUG.mul(transf, { 0, 1, 0, 0,  -1, 0, 0, 0,  0, 0, 1, 0,  0, yShift, 0, 1 }),
				tag = tag
			}
			-- the model index must be in base 0 !
			result.labelText[#result.models - 1] = { tostring(nTerminal), tostring(nTerminal)}
		end
		for i = 2, #params.terminals[nTerminal].centrePlatformsRelative - 1, 4 do
			local cpl = params.terminals[nTerminal].centrePlatformsRelative[i]
			local era = moduleHelpers.getEraPrefix(params, nTerminal, i)
			local platformWidth = cpl.width
			local yShift = 0 -- isTrackOnPlatformLeft and platformWidth + 1.0 or -platformWidth - 1.0
			local transf = moduleHelpers.getTerminalDecoTransf(cpl.posTanX2)
			local lampsModelId = nil
			if era == moduleHelpers.eras.era_a.prefix then lampsModelId = 'lollo_freestyle_train_station/asset/era_a_cargo_lamps.mdl'
			elseif era == moduleHelpers.eras.era_b.prefix then lampsModelId = 'lollo_freestyle_train_station/asset/era_b_cargo_lamps.mdl'
			else lampsModelId = 'lollo_freestyle_train_station/asset/era_c_cargo_lamps_sodium.mdl'
			end
			result.models[#result.models + 1] = {
				id = lampsModelId,
				slotId = slotId,
				transf = transfUtilsUG.mul(transf, { 0, 1, 0, 0,  -1, 0, 0, 0,  0, 0, 1, 0,  0, yShift, 0, 1 }),
				tag = tag
			}
		end
		for i = 4, #params.terminals[nTerminal].centrePlatformsRelative - 1, 4 do
			local cpl = params.terminals[nTerminal].centrePlatformsRelative[i]
			local platformWidth = cpl.width
			local yShift = 0 --isTrackOnPlatformLeft and platformWidth + 1.0 or -platformWidth - 1.0
			local transf = moduleHelpers.getTerminalDecoTransf(cpl.posTanX2)
			result.models[#result.models + 1] = {
				id = 'lollo_freestyle_train_station/asset/cargo_speakers.mdl',
				slotId = slotId,
				transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, yShift, 0, 1 }),
				tag = tag
			}
		end

		print('cargoTerminal.module.updateFn ending')
	end,

	getModelsFn = function(params)
		return {
			{
				id = _constants.terminalModelFileName,
				transf = transfUtilsUG.transl(vec3.new(0.0, 0.0, 0.0)),
			},
		}
	end
}

end
