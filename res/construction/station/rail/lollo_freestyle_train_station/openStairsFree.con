function data()
    local _constants = require('lollo_freestyle_train_station.constants')
    local _moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
    local _modulesutilUG = require('modulesutil')
    local _openStairsHelpers = require('lollo_freestyle_train_station.openStairsHelpers')
    local _transfUtilsUG = require('transf')

    local function _myErrorHandler(err)
        print('lollo openStairsFree.con ERROR: ', err)
    end

    local _idTransf = {1, 0, 0, 0,
        0, 1, 0, 0,
        0, 0, 1, 0,
        0, 0, 0, 1}

    local _paramHelpers = {
        getSliderValues = function(max, step)
            local results = {}
            for i = -max, max, step do
                results[#results+1] = tostring(i)
            end
            return results
        end,
        heights = {2, 4, 6, 8},
        eraPrefixes = {_moduleHelpers.eras.era_a.prefix, _moduleHelpers.eras.era_b.prefix, _moduleHelpers.eras.era_c.prefix},
        bridgeChunkLengths = {-1, 4, 8, 16, 32, 64, 0, 1},
        maxBridgeChunkZAngleDeg = 90,
        bridgeChunkZAngleStep = 5,
        maxBridgeChunkYAngleDeg = 15,
        bridgeChunkYAngleStep = 1,
        stairsBases = {-1, 99, 0, --[[ 1, ]] 2, --[[ 3, ]]},
    }
    local _paramValues = {
        heights = {'2m', '4 m', '6m', '8 m'},
        eras = {'A', 'B', 'C'},
        bridgeChunkLengths = {'0', '4 m', '8 m', '16 m', '32 m', '64 m', _('EdgeWithBridge'), _('SnappyEdgeWithBridge')},
        bridgeChunkZAngles = _paramHelpers.getSliderValues(_paramHelpers.maxBridgeChunkZAngleDeg, _paramHelpers.bridgeChunkZAngleStep),
        bridgeChunkZAngleDefaultIndex = math.floor(_paramHelpers.maxBridgeChunkZAngleDeg / _paramHelpers.bridgeChunkZAngleStep),
        bridgeChunkYAngles = _paramHelpers.getSliderValues(_paramHelpers.maxBridgeChunkYAngleDeg, _paramHelpers.bridgeChunkYAngleStep),
        bridgeChunkYAngleDefaultIndex = math.floor(_paramHelpers.maxBridgeChunkYAngleDeg / _paramHelpers.bridgeChunkYAngleStep),
        terrainAlignmentTypes = {'EQUAL', 'LESS', 'GREATER'},
        flatSlopedTerrain = {_('TerrainAlignmentTypeFlat'), _('TerrainAlignmentTypeSloped')},
        stairsBases = {_('NO'), _('Model'), _('EdgeWithNoBridge'), --[[ _('SnappyEdgeWithNoBridge'), ]] _('EdgeWithBridge'), --[[ _('SnappyEdgeWithBridge'), ]]},
    }
    local _paramReaders = {
        getHeight = function(params)
            return _paramHelpers.heights[params.stairs_height + 1] or 8
        end,
        getEraPrefix = function(params)
            return _paramHelpers.eraPrefixes[params.era_prefix + 1] or _paramHelpers.eraPrefixes[1]
        end,
        getBridgeChunkLength = function(params)
            return _paramHelpers.bridgeChunkLengths[params.bridge_chunk_length + 1] or -1
        end,
        getBridgeChunkZAngle = function(params)
            return (math.floor(params.bridge_chunk_z_angle * _paramHelpers.bridgeChunkZAngleStep) - _paramHelpers.maxBridgeChunkZAngleDeg) or 0
        end,
        getBridgeChunkYAngle = function(params)
            return (math.floor(params.bridge_chunk_y_angle * _paramHelpers.bridgeChunkYAngleStep) - _paramHelpers.maxBridgeChunkYAngleDeg) or 0
        end,
        getTerrainAlignmentType = function(params)
            return _paramValues.terrainAlignmentTypes[params.terrain_alignment_type + 1] or _paramValues.terrainAlignmentTypes[1]
        end,
        getStairsBase = function(params)
            return _paramHelpers.stairsBases[params.stairs_base + 1] or -1
        end,
    }

	return {
        type = 'ASSET_DEFAULT',
		description = {
			name = _('OpenStairsFreeName'),
			description = _('OpenStairsFreeDesc'),
            icon = 'ui/lollo_freestyle_train_station/openStairsFree.tga'
		},
		availability = {
			yearFrom = 0,
			yearTo = 0,
		},
        categories = { 'stairs' },
		order = 0,
		autoRemovable = false,
        buildMode = 'MULTI',
		skipCollision = false, -- true,
		params = {
            {
                key = 'stairs_height',
                name = _('OpenStairsFreeHeight'),
                values = _paramValues.heights,
                uiType = 'BUTTON',
                defaultIndex = 1,
            },
            {
                key = 'era_prefix',
                name = _('Era'),
                values = _paramValues.eras,
                uiType = 'BUTTON',
                defaultIndex = 0,
            },
            {
                key = 'bridge_chunk_length',
                name = _('TopPlatformLength'),
                tooltip = _('TopPlatformLengthTooltip'),
                values = _paramValues.bridgeChunkLengths,
                uiType = 'BUTTON',
                defaultIndex = 0,
            },
            {
                key = 'bridge_chunk_z_angle',
                name = _('TopPlatformZAngle'),
                values = _paramValues.bridgeChunkZAngles,
                uiType = 'SLIDER',
                defaultIndex = _paramValues.bridgeChunkZAngleDefaultIndex,
            },
            {
                key = 'bridge_chunk_y_angle',
                name = _('TopPlatformYAngle'),
                values = _paramValues.bridgeChunkYAngles,
                uiType = 'SLIDER',
                defaultIndex = _paramValues.bridgeChunkYAngleDefaultIndex,
            },
            {
                key = 'stairs_base',
                name = _('StairsBase'),
                tooltip = _('StairsBaseTooltip'),
                values = _paramValues.stairsBases,
                uiType = 'BUTTON',
                defaultIndex = 0,
            },
            {
                key = 'terrain_alignment_type',
                name = _('TerrainAlignmentType'),
                values = _paramValues.terrainAlignmentTypes,
                uiType = 'BUTTON',
                defaultIndex = 0,
            },
            {
                key = 'flat_sloped_terrain',
                name = _('FlatSlopedTerrain'),
                values = _paramValues.flatSlopedTerrain,
                uiType = 'BUTTON',
                defaultIndex = 0,
            },
        },
		updateFn = function(params)
            local _height = _paramReaders.getHeight(params)
            local _bridgeChunkLength = _paramReaders.getBridgeChunkLength(params)
            local _stairsBase = _paramReaders.getStairsBase(params)
            local _era_prefix = _paramReaders.getEraPrefix(params)
            local _openStairsRefData = _openStairsHelpers.getData4Era(_era_prefix)

            local _yHalfSize = 1

            local baseLanesModelId = ''
            if _stairsBase == -1 then -- no base
                baseLanesModelId = 'lollo_freestyle_train_station/open_stairs_free_passenger_lanes/passenger_lane_free_open_stairs_base_short_'.. _height ..'m.mdl'
            elseif _stairsBase == 0 or _stairsBase == 1 or _stairsBase == 2 or _stairsBase == 3 then -- edge or snappy edge
                baseLanesModelId = 'lollo_freestyle_train_station/open_stairs_free_passenger_lanes/passenger_lane_free_open_stairs_base_fork_'.. _height ..'m.mdl'
            else -- model
                baseLanesModelId = 'lollo_freestyle_train_station/open_stairs_free_passenger_lanes/passenger_lane_free_open_stairs_base_expanded_'.. _height ..'m.mdl'
            end

            local topLanesModelId = ''
            if _bridgeChunkLength == -1 then -- no bridge
                topLanesModelId = 'lollo_freestyle_train_station/open_stairs_free_passenger_lanes/passenger_lane_free_open_stairs_top_linkable_'.. _height ..'m.mdl'
            elseif _bridgeChunkLength == 0 or _bridgeChunkLength == 1 then -- edge or snappy edge
                topLanesModelId = 'lollo_freestyle_train_station/open_stairs_free_passenger_lanes/passenger_lane_free_open_stairs_top_unlinkable_fork_'.. _height ..'m.mdl'
            else -- model
                topLanesModelId = 'lollo_freestyle_train_station/open_stairs_free_passenger_lanes/passenger_lane_free_open_stairs_top_unlinkable_'.. _height ..'m.mdl'
            end

            local flatFaces = {}
            if _height == 2 then
                flatFaces = { {
                    {0, -_yHalfSize, 0}, {0, _yHalfSize, 0}, {-3.75, _yHalfSize, 0}, {-3.75, -_yHalfSize, 0}
                } }
            elseif _height == 4 then
                flatFaces = { {
                    {0, -_yHalfSize, 0}, {0, _yHalfSize, 0}, {-6, _yHalfSize, 0}, {-6, -_yHalfSize, 0}
                } }
            elseif _height == 6 then
                flatFaces = { {
                    {0, -_yHalfSize, 0}, {0, _yHalfSize, 0}, {-8.25, _yHalfSize, 0}, {-8.25, -_yHalfSize, 0}
                } }
            elseif _height == 8 then
                flatFaces = { {
                    {0, -_yHalfSize, 0}, {0, _yHalfSize, 0}, {-10.5, _yHalfSize, 0}, {-10.5, -_yHalfSize, 0}
                } }
            end
            local slopedFaces = {}
            if _height == 2 then
                slopedFaces = { {
                    {0, -_yHalfSize, 1}, {0, _yHalfSize, 1}, {-3.75, _yHalfSize, -0.5}, {-3.75, -_yHalfSize, -0.5}
                } }
            elseif _height == 4 then
                slopedFaces = { {
                    {0, -_yHalfSize, 3}, {0, _yHalfSize, 3}, {-6, _yHalfSize, -0.5}, {-6, -_yHalfSize, -0.5}
                } }
            elseif _height == 6 then
                slopedFaces = { {
                    {0, -_yHalfSize, 5}, {0, _yHalfSize, 5}, {-8.25, _yHalfSize, -0.5}, {-8.25, -_yHalfSize, -0.5}
                } }
            elseif _height == 8 then
                slopedFaces = { {
                    {0, -_yHalfSize, 7}, {0, _yHalfSize, 7}, {-10.5, _yHalfSize, -0.5}, {-10.5, -_yHalfSize, -0.5}
                } }
            end

            local result = {
                colliders = {},
                cost = 0,
                edgeLists = {},
                groundFaces = {
                    -- {
                    --     face = faces[1],
                    --     loop = true,
                    --     modes = {
                    --         {
                    --             -- key = 'lollo_freestyle_train_station/hole.lua',
                    --             key = 'hole.lua',
                    --             type = 'FILL',
                    --         },
                    --     }
                    -- }
                },
                models = {
                    {
                        -- id = 'lollo_freestyle_train_station/icon/red_huge.mdl',
                        -- id = 'lollo_freestyle_train_station/empty.mdl',
                        id = 'lollo_freestyle_train_station/open_stairs_free/' .. _era_prefix .. 'open_stairs_'.. _height ..'m.mdl',
                        transf = _idTransf,
                    },
                    {
                        id = baseLanesModelId,
                        transf = _idTransf,
                    },
                    {
                        id = 'lollo_freestyle_train_station/open_stairs_free_passenger_lanes/passenger_lane_free_open_stairs_'.. _height ..'m.mdl',
                        transf = _idTransf,
                    },
                    {
                        id = topLanesModelId,
                        transf = _idTransf,
                    },
                },
                terrainAlignmentLists = {
                    {
                        type = _paramReaders.getTerrainAlignmentType(params),
                        optional = true, -- set this to true if the alignment must not throw collision errors when competing against other terrain alignments in the same construction
                        slopeLow = 9.6,
                        slopeHigh = 9.9,
                        faces = params.flat_sloped_terrain == 0 and flatFaces or slopedFaces,
                    },
                },
            }

            local _addBase = function()
                if _stairsBase == 0 or _stairsBase == 1 or _stairsBase == 2 or _stairsBase == 3 then -- edge or snappy edge
                    local _baseLen = 1
                    local edges = {}
                    if _height == 2 then
                        edges = {
                            { { -3.7, 0, 0 }, { -_baseLen, 0, 0 } },  -- node 0 pos, tan
                            { { -3.7 -_baseLen, 0, 0 }, { -_baseLen, 0, 0 } },  -- node 1 pos, tan
                        }
                    elseif _height == 4 then
                        edges = {
                            { { -5.7, 0, 0 }, { -_baseLen, 0, 0 } },  -- node 0 pos, tan
                            { { -5.7 -_baseLen, 0, 0 }, { -_baseLen, 0, 0 } },  -- node 1 pos, tan
                        }
                    elseif _height == 6 then
                        edges = {
                            { { -8.2, 0, 0 }, { -_baseLen, 0, 0 } },  -- node 0 pos, tan
                            { { -8.2 -_baseLen, 0, 0 }, { -_baseLen, 0, 0 } },  -- node 1 pos, tan
                        }
                    elseif _height == 8 then
                        edges = {
                            { { -10.2, 0, 0 }, { -_baseLen, 0, 0 } },  -- node 0 pos, tan
                            { { -10.2 -_baseLen, 0, 0 }, { -_baseLen, 0, 0 } },  -- node 1 pos, tan
                        }
                    end
                    table.insert(
                        result.edgeLists,
                        {
                            alignTerrain = (_stairsBase == 0 or _stairsBase == 1) and true or false, -- only align on ground and in tunnels
                            edges = edges,
                            edgeType = (_stairsBase == 2 or _stairsBase == 3) and 'BRIDGE' or nil,
                            edgeTypeName = (_stairsBase == 2 or _stairsBase == 3) and _openStairsRefData.bridgeTypeName_withRailing or nil,
                            freeNodes = { 1 },
                            params = {
                                tramTrackType  = 'NO',
                                type = _openStairsRefData.streetTypeName_noBridge,
                            },
                            snapNodes = (_stairsBase == 1 or _stairsBase == 3) and { 1 } or { },
                            tag2nodes = {},
                            type = 'STREET'
                        }
                    )

                    -- table.insert(
                    --     result.terrainAlignmentLists,
                    --     { -- LOLLO NOTE this thing with the empty faces is required , otherwise the game will make its own alignments, with spikes and all on bridges or tunnels.
                    --         type = 'EQUAL',
                    --         optional = true,
                    --         faces =  { }
                    --     }
                    -- )
                elseif _stairsBase == 99 then -- model
                    local modelId = 'lollo_freestyle_train_station/open_stairs_free/' .. _era_prefix .. 'open_stairs_base_' .. _height .. 'm.mdl'
                    table.insert(
                        result.models,
                        {
                            id = modelId,
                            transf = _idTransf,
                        }
                    )

                    local baseFaces = {}
                    if _height == 2 then
                        baseFaces = { {
                            {-3.75, -_yHalfSize, 0}, {-3.75, _yHalfSize, 0}, {-5.25, _yHalfSize, 0}, {-5.25, -_yHalfSize, 0}
                        } }
                    elseif _height == 4 then
                        baseFaces = { {
                            {-6, -_yHalfSize, 0}, {-6, _yHalfSize, 0}, {-7.5, _yHalfSize, 0}, {-7.5, -_yHalfSize, 0}
                        } }
                    elseif _height == 6 then
                        baseFaces = { {
                            {-8.25, -_yHalfSize, 0}, {-8.25, _yHalfSize, 0}, {-9.75, _yHalfSize, 0}, {-9.75, -_yHalfSize, 0}
                        } }
                    elseif _height == 8 then
                        baseFaces = { {
                            {-10.5, -_yHalfSize, 0}, {-10.5, _yHalfSize, 0}, {-12, _yHalfSize, 0}, {-12, -_yHalfSize, 0}
                        } }
                    end
                    table.insert(
                        result.terrainAlignmentLists,
                        {
                            type = 'EQUAL',
                            optional = false, -- set this to true if the alignment must not throw collision errors when competing against other terrain alignments in the same construction
                            slopeLow = 9.6,
                            slopeHigh = 9.9,
                            faces = baseFaces,
                        }
                    )
                end
            end

            local _addBridge = function()
                if _bridgeChunkLength == 0 or _bridgeChunkLength == 1 then -- edge or snappy edge
                    local _bridgeLen = 2
                    table.insert(
                        result.edgeLists,
                        {
                            alignTerrain = false, -- only align on ground and in tunnels
                            edges = {
                                { { 0, 0, _height }, { _bridgeLen, 0, 0 } },  -- node 0 pos, tan
                                { { _bridgeLen, 0, _height }, { _bridgeLen, 0, 0 } },  -- node 1 pos, tan
                            },
                            edgeType = 'BRIDGE',
                            edgeTypeName = _openStairsRefData.bridgeTypeName_withRailing,
                            freeNodes = { 1 },
                            params = {
                                tramTrackType  = 'NO',
                                type = _openStairsRefData.streetTypeName_noBridge,
                            },
                            snapNodes = _bridgeChunkLength == 0 and { } or { 1 },
                            tag2nodes = {},
                            type = 'STREET'
                        }
                    )

                    -- table.insert(
                    --     result.terrainAlignmentLists,
                    --     { -- LOLLO NOTE this thing with the empty faces is required , otherwise the game will make its own alignments, with spikes and all on bridges or tunnels.
                    --         type = 'EQUAL',
                    --         optional = true,
                    --         faces =  { }
                    --     }
                    -- )
                elseif _bridgeChunkLength > 1 then -- model
                    local modelId = 'lollo_freestyle_train_station/open_stairs/' .. _era_prefix .. 'bridge_chunk_' .. tostring(_bridgeChunkLength) .. 'm.mdl'
                    local transf = _transfUtilsUG.mul(
                        _transfUtilsUG.rotZ(math.rad(_paramReaders.getBridgeChunkZAngle(params))),
                        _transfUtilsUG.mul(
                            {1, 0, 0, 0,
                            0, 1, 0, 0,
                            0, 0, 1, 0,
                            0, 0, _height, 1},
                            _transfUtilsUG.rotY(math.rad(_paramReaders.getBridgeChunkYAngle(params)))
                        )
                    )
                    table.insert(
                        result.models,
                        {
                            id = modelId,
                            transf = transf,
                        }
                    )

                    local _faceDZ = -0.5
                    local _bridgeFaces = { {
                        {_bridgeChunkLength, -_yHalfSize, _faceDZ, 1},
                        {_bridgeChunkLength, _yHalfSize, _faceDZ, 1},
                        {0, _yHalfSize, _faceDZ, 1},
                        {0, -_yHalfSize, _faceDZ, 1}
                    } }
                    local terrainFaces = {{
                        type = 'LESS',
                        optional = false, -- set this to true if the alignment must not throw collision errors when competing against other terrain alignments in the same construction
                        slopeLow = 9.6,
                        slopeHigh = 9.9,
                        faces = _bridgeFaces,
                    }}
                    -- print('terrainFaces before transf =') debugPrint(terrainFaces)
                    _modulesutilUG.TransformAlignmentFaces(transf, terrainFaces)
                    -- print('terrainFaces after transf =') debugPrint(terrainFaces)
                    table.insert(result.terrainAlignmentLists, terrainFaces[1])

                    -- local bridgeFaces = {
                    --     {_bridgeChunkLength, -_yHalfSize, _faceDZ, 1},
                    --     {_bridgeChunkLength, _yHalfSize, _faceDZ, 1},
                    --     {0, _yHalfSize, _faceDZ, 1},
                    --     {0, -_yHalfSize, _faceDZ, 1}
                    -- }
                    -- _modulesutilUG.TransformFaces(transf, bridgeFaces)
                    -- table.insert(
                    --     result.terrainAlignmentLists,
                    --     {
                    --         type = 'LESS',
                    --         optional = false, -- set this to true if the alignment must not throw collision errors when competing against other terrain alignments in the same construction
                    --         slopeLow = 9.6,
                    --         slopeHigh = 9.9,
                    --         faces = bridgeFaces,
                    --     }
                    -- )
                end
            end

            xpcall(
                function()
                    _addBase()
                    _addBridge()
                end,
                _myErrorHandler
            )

			return result
		end,

        upgradeFn = function(_)
        end,
	}
end
