function data()
    local _constants = require('lollo_freestyle_train_station.constants')
    local _moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
    local _transfUtilsUG = require('transf')

    local function _myErrorHandler(err)
        print('lollo freestyle train station ERROR: ', err)
    end

    local _maxBridgeChunkYAngleDeg = 15
    local _bridgeChunkYAngleStep = 5
    local _maxBridgeChunkZAngleDeg = 90
    local _bridgeChunkZAngleStep = 5
    local _bridgeChunkLengthValues = {'0', '4', '8', '16', '32', '64'}
    local _paramsFunctions = {
        getBridgeChunkYAngle = function(params)
            return (math.floor(params.bridge_chunk_y_angle * _bridgeChunkYAngleStep) - _maxBridgeChunkYAngleDeg) or 0
        end,
        getBridgeChunkYAngleDefault = function()
            return math.floor(_maxBridgeChunkYAngleDeg / _bridgeChunkYAngleStep)
        end,
        getBridgeChunkYAngleValues = function()
            local results = {}
            for i = -_maxBridgeChunkYAngleDeg, _maxBridgeChunkYAngleDeg, _bridgeChunkYAngleStep do
                results[#results+1] = tostring(i)
            end
            return results
        end,
        getBridgeChunkZAngle = function(params)
            return (math.floor(params.bridge_chunk_z_angle * _bridgeChunkZAngleStep) - _maxBridgeChunkZAngleDeg) or 0
        end,
        getBridgeChunkZAngleDefault = function()
            return math.floor(_maxBridgeChunkZAngleDeg / _bridgeChunkZAngleStep)
        end,
        getBridgeChunkZAngleValues = function()
            local results = {}
            for i = -_maxBridgeChunkZAngleDeg, _maxBridgeChunkZAngleDeg, _bridgeChunkZAngleStep do
                results[#results+1] = tostring(i)
            end
            return results
        end,
        getBridgeChunkLength = function(params)
            return tonumber(_bridgeChunkLengthValues[params.bridge_chunk_length + 1] or 0, 10)
        end,
        getBridgeChunkLengthValues = function()
            return _bridgeChunkLengthValues
        end,
        getEraPrefix = function(params)
            if params.era_prefix == 1 then return _moduleHelpers.eras.era_b.prefix
            elseif params.era_prefix == 2 then return _moduleHelpers.eras.era_c.prefix
            else return _moduleHelpers.eras.era_a.prefix
            end
        end,
        getEraValues = function()
            return {'A', 'B', 'C'}
        end,
        getHeightValues = function()
            return {'4m', '8m'}
        end,
    }

	return {
        type = 'ASSET_DEFAULT',
		description = {
			name = _('OpenStairsFreeName'),
			description = _('OpenStairsFreeDesc'),
            icon = 'ui/lollo_freestyle_train_station/openStairsFree.tga'
		},
		availability = {
			yearFrom = 0,
			yearTo = 0,
		},
        categories = { 'stairs' },
		order = 1103,
		autoRemovable = false,
        buildMode = 'MULTI',
		skipCollision = false, -- true,
		params = {
            {
                key = 'stairs_height',
                name = _('OpenStairsFreeHeight'),
                values = _paramsFunctions.getHeightValues(),
                uiType = 'BUTTON',
                defaultIndex = 1,
            },
            {
                key = 'era_prefix',
                name = _('Era'),
                values = _paramsFunctions.getEraValues(),
                uiType = 'BUTTON',
                defaultIndex = 0,
            },
            {
                key = 'bridge_chunk_length',
                name = _('TopPlatformLength'),
                values = _paramsFunctions.getBridgeChunkLengthValues(),
                uiType = 'BUTTON',
                defaultIndex = 0,
            },
            {
                key = 'bridge_chunk_z_angle',
                name = _('TopPlatformZAngle'),
                values = _paramsFunctions.getBridgeChunkZAngleValues(),
                uiType = 'SLIDER',
                defaultIndex = _paramsFunctions.getBridgeChunkZAngleDefault(),
            },
            {
                key = 'bridge_chunk_y_angle',
                name = _('TopPlatformYAngle'),
                values = _paramsFunctions.getBridgeChunkYAngleValues(),
                uiType = 'SLIDER',
                defaultIndex = _paramsFunctions.getBridgeChunkYAngleDefault(),
            },
        },
		updateFn = function(params)
            local _ySize = 0.6
            local _flatFaces = params.stairs_height == 1
                and { {
                    {0, -_ySize, 0}, {0, _ySize, 0}, {-10, _ySize, 0}, {-10, -_ySize, 0}
                } }
                or { {
                    {0, -_ySize, 0}, {0, _ySize, 0}, {-5, _ySize, 0}, {-5, -_ySize, 0}
                } }
            local _slopedFaces = params.stairs_height == 1
                and { {
                    {0, -_ySize, 5}, {0, _ySize, 5}, {-10, _ySize, 0}, {-10, -_ySize, 0}
                } }
                or { {
                    {0, -_ySize, 2.5}, {0, _ySize, 2.5}, {-5, _ySize, 0}, {-5, -_ySize, 0}
                } }
            -- local _flatTriangles = params.stairs_height == 1
            --     and {
            --             {
            --                 {-10, -_ySize, 0}, {0, -_ySize, 0}, {0, _ySize, 0},
            --             },
            --             {
            --                 {0, _ySize, 0}, {-10, _ySize, 0}, {-10, -_ySize, 0},
            --             },
            --         }
            --     or {
            --         {
            --             {-5, -_ySize, 0}, {0, -_ySize, 0}, {0, _ySize, 0},
            --         },
            --         {
            --             {0, _ySize, 0}, {-5, _ySize, 0}, {-5, -_ySize, 0},
            --         },
            --     }
            -- local _slopedTriangles = params.stairs_height == 1
            --     and {
            --             {
            --                 {-10, -_ySize, 0}, {0, -_ySize, 5}, {0, _ySize, 5},
            --             },
            --             {
            --                 {0, _ySize, 5}, {-10, _ySize, 0}, {-10, -_ySize, 0},
            --             },
            --         }
            --     or {
            --         {
            --             {-5, -_ySize, 0}, {0, -_ySize, 2.5}, {0, _ySize, 2.5},
            --         },
            --         {
            --             {0, _ySize, 2.5}, {-5, _ySize, 0}, {-5, -_ySize, 0},
            --         },
            --     }
            -- local _alongFaces = params.stairs_height == 1
            --     and { {
            --         {-8, -_ySize, 0},
            --         {0, -_ySize, 7.5},
            --         {0, _ySize, 7.5},
            --         {-8, _ySize, 0}
            --     } }
            --     or { {
            --         {-4, -_ySize, 0},
            --         {0, -_ySize, 3.5},
            --         {0, _ySize, 3.5},
            --         {-4, _ySize, 0}
            --     } }
            local _era_prefix = _paramsFunctions.getEraPrefix(params)

            local result = {
                colliders = {},
                cost = 0,
                edgeLists = {},
                groundFaces = {
                    -- {
                    --     face = faces[1],
                    --     loop = true,
                    --     modes = {
                    --         {
                    --             -- key = 'lollo_freestyle_train_station/hole.lua',
                    --             key = 'hole.lua',
                    --             type = 'FILL',
                    --         },
                    --     }
                    -- }
                },
                models = {
                    {
                        -- id = 'lollo_freestyle_train_station/icon/red_huge.mdl',
                        -- id = 'lollo_freestyle_train_station/empty.mdl',
                        id = 'lollo_freestyle_train_station/open_stairs/' .. _era_prefix .. (params.stairs_height == 1 and 'open_stairs_up.mdl' or 'open_stairs_up_half.mdl'),
                        transf = {1, 0, 0, 0,
                            0, 1, 0, 0,
                            0, 0, 1, 0,
                            0, 0, 0, 1},
                    },
                    {
                        id = params.stairs_height == 1 and 'lollo_freestyle_train_station/passenger_lane_open_stairs_free.mdl' or 'lollo_freestyle_train_station/passenger_lane_open_stairs_free_half.mdl',
                        transf = {1, 0, 0, 0,
                            0, 1, 0, 0,
                            0, 0, 1, 0,
                            0, 0, 0, 1},
                    },
                },
                terrainAlignmentLists = {
                    {
                        type = 'EQUAL',
                        -- type = 'LESS',
                        -- type = 'GREATER',
                        optional = true,
                        slopeLow = 9.6,
                        slopeHigh = 9.9,
                        faces =  _flatFaces,
                        -- faces = _slopedFaces,
                        -- triangles = _flatTriangles,
                        -- triangles = _slopedTriangles,
                    },
                    -- {
                    --     type = 'LESS',
                    --     optional = true,
                    --     -- slopeLow = 0.6,
                    --     -- slopeHigh = 0.9,
                    --     faces =  _alongFaces
                    -- }
                },
            }

            xpcall(
                function()
                    local _bridgeChunkLength = _paramsFunctions.getBridgeChunkLength(params)
                    if _bridgeChunkLength > 0 then
                        local modelId = 'lollo_freestyle_train_station/open_stairs/' .. _era_prefix .. 'bridge_chunk_' .. tostring(_bridgeChunkLength) .. 'm.mdl'
                        local transf = _transfUtilsUG.mul(
                            _transfUtilsUG.rotZ(math.rad(_paramsFunctions.getBridgeChunkZAngle(params))),
                            _transfUtilsUG.mul(
                                {1, 0, 0, 0,
                                0, 1, 0, 0,
                                0, 0, 1, 0,
                                0, 0, params.stairs_height == 1 and _constants.openStairsUpZ or _constants.openStairsUpZ / 2, 1},
                                _transfUtilsUG.rotY(math.rad(_paramsFunctions.getBridgeChunkYAngle(params)))
                            )
                        )
                        table.insert(
                            result.models,
                            {
                                id = modelId,
                                transf = transf,
                            }
                        )
                    end
                end,
                _myErrorHandler
            )

			return result
		end,
        upgradeFn = function(_)
        end,
	}
end
