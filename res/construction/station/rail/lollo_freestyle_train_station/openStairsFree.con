function data()
    local _constants = require('lollo_freestyle_train_station.constants')
    local _moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
    local _transfUtilsUG = require('transf')

    local function _myErrorHandler(err)
        print('lollo freestyle train station ERROR: ', err)
    end

    local _paramHelpers = {
        getSliderValues = function(max, step)
            local results = {}
            for i = -max, max, step do
                results[#results+1] = tostring(i)
            end
            return results
        end,
        maxBridgeChunkYAngleDeg = 15,
        bridgeChunkYAngleStep = 5,
        maxBridgeChunkZAngleDeg = 90,
        bridgeChunkZAngleStep = 5,
        eraPrefixes = {_moduleHelpers.eras.era_a.prefix, _moduleHelpers.eras.era_b.prefix, _moduleHelpers.eras.era_c.prefix},
    }
    local _paramValues = {
        heights = {'4 m', '8 m'},
        eras = {'A', 'B', 'C'},
        bridgeChunkLengths = {'0', '4', '8', '16', '32', '64'},
        bridgeChunkZAngles = _paramHelpers.getSliderValues(_paramHelpers.maxBridgeChunkZAngleDeg, _paramHelpers.bridgeChunkZAngleStep),
        bridgeChunkYAngles = _paramHelpers.getSliderValues(_paramHelpers.maxBridgeChunkYAngleDeg, _paramHelpers.bridgeChunkYAngleStep),
        terrainAlignmentTypes = {'EQUAL', 'LESS', 'GREATER'},
        flatSlopedTerrain = {_('TerrainAlignmentTypeFlat'), _('TerrainAlignmentTypeSloped')},
    }
    local _paramReaders = {
        getEraPrefix = function(params)
            return _paramHelpers.eraPrefixes[params.era_prefix + 1] or _paramHelpers.eraPrefixes[1]
        end,
        getBridgeChunkLength = function(params)
            return tonumber(_paramValues.bridgeChunkLengths[params.bridge_chunk_length + 1] or 0, 10)
        end,
        getBridgeChunkZAngleDefault = function()
            return math.floor(_paramValues.maxBridgeChunkZAngleDeg / _paramValues.bridgeChunkZAngleStep)
        end,
        getBridgeChunkZAngle = function(params)
            return (math.floor(params.bridge_chunk_z_angle * _paramValues.bridgeChunkZAngleStep) - _paramValues.maxBridgeChunkZAngleDeg) or 0
        end,
        getBridgeChunkYAngleDefault = function()
            return math.floor(_paramValues.maxBridgeChunkYAngleDeg / _paramValues.bridgeChunkYAngleStep)
        end,
        getBridgeChunkYAngle = function(params)
            return (math.floor(params.bridge_chunk_y_angle * _paramValues.bridgeChunkYAngleStep) - _paramValues.maxBridgeChunkYAngleDeg) or 0
        end,
        getTerrainAlignmentType = function(params)
            return _paramValues.terrainAlignmentTypes[params.terrain_alignment_type + 1] or _paramValues.terrainAlignmentTypes[1]
        end,
    }

	return {
        type = 'ASSET_DEFAULT',
		description = {
			name = _('OpenStairsFreeName'),
			description = _('OpenStairsFreeDesc'),
            icon = 'ui/lollo_freestyle_train_station/openStairsFree.tga'
		},
		availability = {
			yearFrom = 0,
			yearTo = 0,
		},
        categories = { 'stairs' },
		order = 0,
		autoRemovable = false,
        buildMode = 'MULTI',
		skipCollision = false, -- true,
		params = {
            {
                key = 'stairs_height',
                name = _('OpenStairsFreeHeight'),
                values = _paramValues.heights,
                uiType = 'BUTTON',
                defaultIndex = 1,
            },
            {
                key = 'era_prefix',
                name = _('Era'),
                values = _paramValues.eras,
                uiType = 'BUTTON',
                defaultIndex = 0,
            },
            {
                key = 'bridge_chunk_length',
                name = _('TopPlatformLength'),
                values = _paramValues.bridgeChunkLengths,
                uiType = 'BUTTON',
                defaultIndex = 0,
            },
            {
                key = 'bridge_chunk_z_angle',
                name = _('TopPlatformZAngle'),
                values = _paramValues.bridgeChunkZAngles,
                uiType = 'SLIDER',
                defaultIndex = _paramReaders.getBridgeChunkZAngleDefault(),
            },
            {
                key = 'bridge_chunk_y_angle',
                name = _('TopPlatformYAngle'),
                values = _paramValues.bridgeChunkYAngles,
                uiType = 'SLIDER',
                defaultIndex = _paramReaders.getBridgeChunkYAngleDefault(),
            },
            {
                key = 'terrain_alignment_type',
                name = _('TerrainAlignmentType'),
                values = _paramValues.terrainAlignmentTypes,
                uiType = 'BUTTON',
                defaultIndex = 0,
            },
            {
                key = 'flat_sloped_terrain',
                name = _('FlatSlopedTerrain'),
                values = _paramValues.flatSlopedTerrain,
                uiType = 'BUTTON',
                defaultIndex = 0,
            },
        },
		updateFn = function(params)
            local _ySize = 0.6
            local _flatFaces = params.stairs_height == 0
                and { {
                    {0, -_ySize, 0}, {0, _ySize, 0}, {-5, _ySize, 0}, {-5, -_ySize, 0}
                } }
                or { {
                    {0, -_ySize, 0}, {0, _ySize, 0}, {-9, _ySize, 0}, {-9, -_ySize, 0}
                } }
            local _slopedFaces = params.stairs_height == 0
                and { {
                    {0, -_ySize, 3}, {0, _ySize, 3}, {-5, _ySize, 0}, {-5, -_ySize, 0}
                } }
                or { {
                    {0, -_ySize, 7}, {0, _ySize, 7}, {-9, _ySize, 0}, {-9, -_ySize, 0}
                } }

            local _era_prefix = _paramReaders.getEraPrefix(params)

            local result = {
                colliders = {},
                cost = 0,
                edgeLists = {},
                groundFaces = {
                    -- {
                    --     face = faces[1],
                    --     loop = true,
                    --     modes = {
                    --         {
                    --             -- key = 'lollo_freestyle_train_station/hole.lua',
                    --             key = 'hole.lua',
                    --             type = 'FILL',
                    --         },
                    --     }
                    -- }
                },
                models = {
                    {
                        -- id = 'lollo_freestyle_train_station/icon/red_huge.mdl',
                        -- id = 'lollo_freestyle_train_station/empty.mdl',
                        id = 'lollo_freestyle_train_station/open_stairs/' .. _era_prefix .. (params.stairs_height == 0 and 'open_stairs_up_half.mdl' or 'open_stairs_up.mdl'),
                        transf = {1, 0, 0, 0,
                            0, 1, 0, 0,
                            0, 0, 1, 0,
                            0, 0, 0, 1},
                    },
                    {
                        id = params.stairs_height == 0 and 'lollo_freestyle_train_station/passenger_lane_open_stairs_free_half.mdl' or 'lollo_freestyle_train_station/passenger_lane_open_stairs_free.mdl',
                        transf = {1, 0, 0, 0,
                            0, 1, 0, 0,
                            0, 0, 1, 0,
                            0, 0, 0, 1},
                    },
                },
                terrainAlignmentLists = {
                    {
                        type = _paramReaders.getTerrainAlignmentType(params),
                        optional = true,
                        slopeLow = 9.6,
                        slopeHigh = 9.9,
                        faces = params.flat_sloped_terrain == 0 and _flatFaces or _slopedFaces,
                    },
                },
            }

            xpcall(
                function()
                    local _bridgeChunkLength = _paramReaders.getBridgeChunkLength(params)
                    if _bridgeChunkLength > 0 then
                        local modelId = 'lollo_freestyle_train_station/open_stairs/' .. _era_prefix .. 'bridge_chunk_' .. tostring(_bridgeChunkLength) .. 'm.mdl'
                        local transf = _transfUtilsUG.mul(
                            _transfUtilsUG.rotZ(math.rad(_paramReaders.getBridgeChunkZAngle(params))),
                            _transfUtilsUG.mul(
                                {1, 0, 0, 0,
                                0, 1, 0, 0,
                                0, 0, 1, 0,
                                0, 0, params.stairs_height == 0 and _constants.openStairsUpZ / 2 or _constants.openStairsUpZ, 1},
                                _transfUtilsUG.rotY(math.rad(_paramReaders.getBridgeChunkYAngle(params)))
                            )
                        )
                        table.insert(
                            result.models,
                            {
                                id = modelId,
                                transf = transf,
                            }
                        )
                    end
                end,
                _myErrorHandler
            )

			return result
		end,

        upgradeFn = function(_)
        end,
	}
end
