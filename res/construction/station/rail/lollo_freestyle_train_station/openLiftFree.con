function data()
    local _constants = require('lollo_freestyle_train_station.constants')
    local _openLiftOpenStairsHelpers = require('lollo_freestyle_train_station.openLiftOpenStairsHelpers')

    local function _myErrorHandler(err)
        print('lollo openLiftFree.con ERROR: ', err)
    end

    local _paramValues = _openLiftOpenStairsHelpers.paramValues.lift
    local _paramReaders = _openLiftOpenStairsHelpers.paramReaders.lift

	return {
        type = 'ASSET_DEFAULT',
		description = {
			name = _('OpenLiftFreeName'),
			description = _('OpenLiftFreeDesc'),
            icon = 'ui/construction/station/rail/lollo_freestyle_train_station/openLiftFree.tga'
		},
		availability = {
			yearFrom = 0,
			yearTo = 0,
		},
        categories = { 'stairs' },
		order = 999,
		autoRemovable = false,
        -- buildMode = 'MULTI',
		skipCollision = false, -- true,
		params = {
            {
                key = 'lift_height',
                name = _('BridgeHeight'),
                values = _paramValues.lift_height,
                uiType = 'BUTTON',
                defaultIndex = 0,
            },
            {
                key = 'era_prefix',
                name = _('Era'),
                values = _paramValues.era_prefix,
                uiType = 'BUTTON',
                defaultIndex = 0,
            },
            {
                key = 'lift_bridge_mode', -- do not rename this param or chenga its values
                name = _('BridgeMode'),
                values = _paramValues.lift_bridge_mode,
                uiType = 'BUTTON',
                defaultIndex = 2,
            },
            {
                key = 'bridge_chunk_y_angle',
                name = _('BridgeYAngle'),
                values = _paramValues.bridge_chunk_y_angle,
                uiType = 'SLIDER',
                defaultIndex = _paramValues.bridge_chunk_y_angle_DefaultIndex,
            },
            {
                key = 'lift_base_mode', -- do not rename this param or chenga its values
                name = _('BaseMode'),
                values = _paramValues.lift_base_mode,
                uiType = 'BUTTON',
                defaultIndex = 0,
            },
        },
		updateFn = function(params)
            local _bridgeMode = _paramReaders.getBridgeMode(params)
            local _baseMode = _paramReaders.getBaseMode(params)
            local _era_prefix = _paramReaders.getEraPrefix(params)
            local _height = _paramReaders.getHeight(params)
            local _sinYAngle = _paramReaders.getSinYAngle(params)
            local _openStairsRefData = _openLiftOpenStairsHelpers.getData4Era(_era_prefix)
            local _groundFacesFillKey = _constants[_era_prefix .. 'groundFacesFillKey']

            local result = {
                colliders = {},
                cost = 0,
                edgeLists = {},
                groundFaces = {
                    {
                        face = {
                            {-1, -3, 0, 1}, {-1, 3, 0, 1}, {1, 3, 0, 1}, {1, -3, 0, 1}
                        },
                        loop = true,
                        modes = {
                            {
                                -- key = 'lollo_freestyle_train_station/hole.lua',
                                -- key = 'hole.lua',
                                key = _groundFacesFillKey,
                                type = 'FILL',
                            },
                        },
                    },
                    -- {
                    --     face = faces[1],
                    --     loop = true,
                    --     modes = {
                    --         {
                    --             -- key = 'lollo_freestyle_train_station/hole.lua',
                    --             key = 'hole.lua',
                    --             type = 'FILL',
                    --         },
                    --     }
                    -- }
                },
                models = {
                    {
                        -- id = 'lollo_freestyle_train_station/icon/red_huge.mdl',
                        id = 'lollo_freestyle_train_station/open_lifts_free/' .. _era_prefix .. ('open_lift_free_').. _height ..'m.mdl',
                        transf = {0, 1, 0, 0,  -1, 0, 0, 0,  0, 0, 1, 0,  0, 0, 0, 1},
                    },
                    {
                        id = (_baseMode == -1
                            and 'lollo_freestyle_train_station/open_lift_free_passenger_lanes/bottom_for_tp.mdl'
                            or 'lollo_freestyle_train_station/open_lift_free_passenger_lanes/bottom_for_edges.mdl'),
                        transf = _constants.idTransf,
                    },
                    {
                        id = 'lollo_freestyle_train_station/open_lift_free_passenger_lanes/bottom_to_top_1m.mdl',
                        transf = {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, _height, 0,  0, 0, 0, 1},
                    },
                },
                terrainAlignmentLists = {
                    {
                        type = 'EQUAL',
                        optional = true, -- set this to true if the alignment must not throw collision errors when competing against other terrain alignments in the same construction
                        slopeLow = 9.6,
                        slopeHigh = 9.9,
                        faces = { {
                            {-1, -3, 0}, {-1, 3, 0}, {1, 3, 0}, {1, -3, 0}
                        } },
                    },
                },
            }

            local _addBase = function()
                local _bridgeLen = 0.9
                local edges1 = {
                    { { 0, -_bridgeLen -1.5, 0 }, { 0, _bridgeLen, 0 } },  -- node 0 pos, tan
                    { { 0, -1.5, 0 }, { 0, _bridgeLen, 0 } },  -- node 1 pos, tan
                }
                local edges2 = {
                    { { 0, 1.5, 0 }, { 0, _bridgeLen, 0 } },  -- node 0 pos, tan
                    { { 0, 1.5 + _bridgeLen, 0 }, { 0, _bridgeLen, 0 } },  -- node 1 pos, tan
                }
                if _baseMode == 0 or _baseMode == 1 then -- edge or snappy edge
                    table.insert(
                        result.edgeLists,
                        {
                            alignTerrain = true,
                            edges = edges1,
                            freeNodes = { 0 },
                            params = {
                                tramTrackType  = 'NO',
                                type = _openStairsRefData.streetTypeName_noBridge,
                            },
                            snapNodes = _baseMode == 0 and { } or { 0 },
                            -- tag2nodes = {},
                            type = 'STREET'
                        }
                    )
                    table.insert(
                        result.edgeLists,
                        {
                            alignTerrain = true,
                            edges = edges2,
                            freeNodes = { 1 },
                            params = {
                                tramTrackType  = 'NO',
                                type = _openStairsRefData.streetTypeName_noBridge,
                            },
                            snapNodes = _baseMode == 0 and { } or { 1 },
                            -- tag2nodes = {},
                            type = 'STREET'
                        }
                    )
                elseif _baseMode == 2 or _baseMode == 3 then -- bridge or snappy bridge
                    table.insert(
                        result.edgeLists,
                        {
                            alignTerrain = false,
                            edges = edges1,
                            edgeType = 'BRIDGE',
                            edgeTypeName = _openStairsRefData.bridgeTypeName_noRailing,
                            freeNodes = { 0 },
                            params = {
                                tramTrackType  = 'NO',
                                type = _openStairsRefData.streetTypeName_noBridge,
                            },
                            snapNodes = _baseMode == 2 and { } or { 0 },
                            -- tag2nodes = {},
                            type = 'STREET'
                        }
                    )
                    table.insert(
                        result.edgeLists,
                        {
                            alignTerrain = false,
                            edges = edges2,
                            edgeType = 'BRIDGE',
                            edgeTypeName = _openStairsRefData.bridgeTypeName_noRailing,
                            freeNodes = { 1 },
                            params = {
                                tramTrackType  = 'NO',
                                type = _openStairsRefData.streetTypeName_noBridge,
                            },
                            snapNodes = _baseMode == 2 and { } or { 1 },
                            -- tag2nodes = {},
                            type = 'STREET'
                        }
                    )
                end
            end

            local _addBridge = function()
                local _bridgeLen = 0.9
                local _zShift = _bridgeLen * _sinYAngle
                local edges1 = {
                    { { -_bridgeLen, 0, _height + _zShift}, { _bridgeLen, 0, -_zShift } },  -- node 0 pos, tan
                    { { 0, 0, _height }, { _bridgeLen, 0, -_zShift } },  -- node 1 pos, tan
                }
                local edges2 = {
                    { { 0, 0, _height }, { _bridgeLen, 0, _zShift } },  -- node 0 pos, tan
                    { { _bridgeLen, 0, _height  + _zShift}, { _bridgeLen, 0, _zShift } },  -- node 1 pos, tan
                }
                if _bridgeMode == 0 or _bridgeMode == 1 then -- edge or snappy edge
                    table.insert(
                        result.edgeLists,
                        {
                            alignTerrain = false,
                            edges = edges1,
                            freeNodes = { 0 },
                            params = {
                                tramTrackType  = 'NO',
                                type = _openStairsRefData.streetTypeName_noBridge,
                            },
                            snapNodes = _bridgeMode == 0 and { } or { 0 },
                            -- tag2nodes = {},
                            type = 'STREET'
                        }
                    )
                    table.insert(
                        result.edgeLists,
                        {
                            alignTerrain = false,
                            edges = edges2,
                            freeNodes = { 1 },
                            params = {
                                tramTrackType  = 'NO',
                                type = _openStairsRefData.streetTypeName_noBridge,
                            },
                            snapNodes = _bridgeMode == 0 and { } or { 1 },
                            -- tag2nodes = {},
                            type = 'STREET'
                        }
                    )
                elseif _bridgeMode == 2 or _bridgeMode == 3 then -- bridge or snappy bridge
                    table.insert(
                        result.edgeLists,
                        {
                            alignTerrain = false,
                            edges = edges1,
                            edgeType = 'BRIDGE',
                            edgeTypeName = _openStairsRefData.bridgeTypeName_noRailing,
                            freeNodes = { 0 },
                            params = {
                                tramTrackType  = 'NO',
                                type = _openStairsRefData.streetTypeName_noBridge,
                            },
                            snapNodes = _bridgeMode == 2 and { } or { 0 },
                            -- tag2nodes = {},
                            type = 'STREET'
                        }
                    )
                    table.insert(
                        result.edgeLists,
                        {
                            alignTerrain = false,
                            edges = edges2,
                            edgeType = 'BRIDGE',
                            edgeTypeName = _openStairsRefData.bridgeTypeName_noRailing,
                            freeNodes = { 1 },
                            params = {
                                tramTrackType  = 'NO',
                                type = _openStairsRefData.streetTypeName_noBridge,
                            },
                            snapNodes = _bridgeMode == 2 and { } or { 1 },
                            -- tag2nodes = {},
                            type = 'STREET'
                        }
                    )
                    -- adjust the terrain so it does not cover the bridge
                    table.insert(
                        result.terrainAlignmentLists,
                        {
                            type = 'LESS',
                            optional = true,
                            faces =  {{
                                {-2, -1, 0}, {-2, 1, 0}, {2, 1, 0}, {2, -1, 0},
                            }}
                        }
                    )
                end
            end

            xpcall(
                function()
                    _addBase()
                    _addBridge()
                end,
                _myErrorHandler
            )

			return result
		end,

        upgradeFn = function(_)
        end,
	}
end
