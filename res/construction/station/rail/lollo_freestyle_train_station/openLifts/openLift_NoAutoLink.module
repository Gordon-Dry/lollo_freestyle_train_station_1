local _constants = require('lollo_freestyle_train_station.constants')
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require "transf"


function data()
	return {
		availability = {
			yearFrom = 0,
			yearTo = 0
		},
		category = {
			categories = { "passenger-up-and-down", },
		},
		cost = {
			price = 0,
		},
		description = {
			name = _("OpenLift_NoAutoLinkName"),
			description = _("OpenLift_NoAutoLinkDesc"),
			icon = "ui/lollo_freestyle_train_station/openLift_NoAutoLink.tga"
		},
		metadata = { },
		order = {
			value = 75,
		},
		type = _constants.openLiftModuleType,
		updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, updateScriptParams)
			local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
			if not nTerminal or not baseId then return end

			local eraPrefix = moduleHelpers.getEraPrefix(params, nTerminal, nTrackEdge)
			local modelId = nil
			if eraPrefix == moduleHelpers.eras.era_a.prefix then modelId = 'lollo_freestyle_train_station/open_lifts/era_a_open_lift_8m.mdl'
			elseif eraPrefix == moduleHelpers.eras.era_b.prefix then modelId = 'lollo_freestyle_train_station/open_lifts/era_b_open_lift_8m.mdl'
			else modelId = 'lollo_freestyle_train_station/open_lifts/era_c_open_lift_8m.mdl'
			end
			result.models[#result.models + 1] = {
				id = modelId,
				slotId = slotId,
				transf = slotTransf,
				tag = tag
			}
			table.insert(result.slots, {
				id = result.mangleId(nTerminal, nTrackEdge, _constants.idBases.openLiftExitInnerSlotId),
				shape = 1,
				spacing = {-1, 3, 0.5, 0.5},
				transf = transfUtils.getTransf_ZRotatedM90_Shifted(
					slotTransf,
					{0, -1, _constants.openStairsUpZ}
				),
				type = _constants.openStairsExitModuleType,
			})
			table.insert(result.slots, {
				id = result.mangleId(nTerminal, nTrackEdge, _constants.idBases.openLiftExitForwardSlotId),
				shape = 1,
				spacing = {-1, 3, 0.5, 0.5},
				-- transf = transfUtilsUG.mul(
				-- 	slotTransf,
				-- 	{ 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  1, 0, _constants.openStairsUpZ, 1 }
				-- ),
				transf = transfUtils.getTransf_Shifted(
					slotTransf,
					{1, 0, _constants.openStairsUpZ}
				),
				type = _constants.openStairsExitModuleType,
			})
			table.insert(result.slots, {
				id = result.mangleId(nTerminal, nTrackEdge, _constants.idBases.openLiftExitOuterSlotId),
				shape = 1,
				spacing = {-1, 3, 0.5, 0.5},
				-- transf = transfUtilsUG.mul(
				-- 	slotTransf,
				-- 	{ 0, 1, 0, 0,  -1, 0, 0, 0,  0, 0, 1, 0,  0, 1, _constants.openStairsUpZ, 1 }
				-- ),
				transf = transfUtils.getTransf_ZRotatedP90_Shifted(
					slotTransf,
					{0, 1, _constants.openStairsUpZ}
				),
				type = _constants.openStairsExitModuleType,
			})
			table.insert(result.slots, {
				id = result.mangleId(nTerminal, nTrackEdge, _constants.idBases.openLiftExitBackwardSlotId),
				shape = 1,
				spacing = {-1, 3, 0.5, 0.5},
				-- transf = transfUtilsUG.mul(
				-- 	slotTransf,
				-- 	{ -1, 0, 0, 0,  0, -1, 0, 0,  0, 0, 1, 0,  -1, 0, _constants.openStairsUpZ, 1 }
				-- ),
				transf = transfUtils.getTransf_ZRotated180_Shifted(
					slotTransf,
					{-1, 0, _constants.openStairsUpZ}
				),
				type = _constants.openStairsExitModuleType,
			})
		end,

		getModelsFn = function(params)
			return {
				{
					id = 'lollo_freestyle_train_station/open_lifts/era_c_open_lift_8m.mdl',
					transf = _constants.idTransf,
				},
			}
		end
	}
end
