local _constants = require('lollo_freestyle_train_station.constants')
-- local constructionutil = require "constructionutil"
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
local modulesutil = require "modulesutil"
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require "transf"
local vec3 = require "vec3"


function data()
return {
	availability = {
		yearFrom = 0,
		yearTo = 0
	},
	category = {
		categories = { "cargo-platform-extensions", },
	},
	cost = {
		price = 0,
	},
	description = {
		name = _("SlopedCargoArea1x5Name"),
		description = _("SlopedCargoArea1x5Desc"),
		icon = "ui/lollo_freestyle_train_station/cargo_area_1x5.tga"
	},
	metadata = { },
	order = {
		value = 21,
	},
	type = _constants.slopedCargoArea1x5ModuleType,
	updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, updateScriptParams)
		local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
		if not nTerminal or not nTrackEdge or not baseId then return end

		local isInner = moduleHelpers.slopedAreas.addModels(result, tag, params, nTerminal, nTrackEdge, 5, _constants.slopedCargoArea1x5ModelFileName)
		-- local isTrackOnPlatformLeft = params.terminals[nTerminal].isTrackOnPlatformLeft
		-- local xScaleFactor = isTrackOnPlatformLeft and 1.05 or 1

		-- local ii1 = nTrackEdge - 1
		-- local iiN = nTrackEdge + 1
		-- for ii = 1, #params.terminals[nTerminal].centrePlatformsFine do
		-- 	if params.terminals[nTerminal].centrePlatformsFine[ii].leadingIndex > iiN then break end
		-- 	if params.terminals[nTerminal].centrePlatformsFine[ii].leadingIndex >= ii1 then
		-- 	-- if params.terminals[nTerminal].centrePlatformsFine[ii].leadingIndex >= ii1
		-- 	-- and params.terminals[nTerminal].centrePlatformsFine[ii].leadingIndex <= iiN then
		-- 		local cpf = params.terminals[nTerminal].centrePlatformsFine[ii]
		-- 		local cpfPosTanX2 = transfUtils.getPosTanX2Transformed(cpf.posTanX2, result.inverseMainTransf)
		-- 		local yShiftOutside = moduleHelpers.slopedAreas.getYShift(params, nTerminal, cpf.leadingIndex, 5)
		-- 		result.models[#result.models+1] = {
		-- 			id = _constants.slopedCargoArea1x5ModelFileName,
		-- 			transf = transfUtilsUG.mul(
		-- 				moduleHelpers.getPlatformObjectTransf_WithYRotation(cpfPosTanX2),
		-- 				{ xScaleFactor, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, yShiftOutside, _constants.platformSideBitsZ, 1 }
		-- 			),
		-- 			tag = tag
		-- 		}
		-- 	end
		-- end

		moduleHelpers.slopedAreas.doTerrain(result, slotTransf, params, nTerminal, nTrackEdge, isInner, 5)
		-- if params.terminals[nTerminal].centrePlatforms[nTrackEdge].type == 0 then -- only align terrain if on ground
		-- 	local face = {
		-- 		{-3, -13, 0, 1},
		-- 		{-3, 13, 0, 1},
		-- 		{3, 13, 0, 1},
		-- 		{3, -13, 0, 1},
		-- 	}
		-- 	modulesutil.TransformFaces(slotTransf, face)
		-- 	result.groundFaces[#result.groundFaces + 1] = moduleHelpers.getGroundFace(face, 'shared/asphalt_01.gtex.lua')
		-- 	result.terrainAlignmentLists[#result.terrainAlignmentLists + 1] = moduleHelpers.getTerrainAlignmentList(face, 0, 'EQUAL', 1, 0.5)
		-- end
	end,

	getModelsFn = function(params)
		local results = {}
		for y = -2, 2 do
			results[#results+1] = {
				id = _constants.slopedCargoArea1x5ModelFileName,
				transf = {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, y, 0, 1},
			}
		end
		return results
	end
}

end
