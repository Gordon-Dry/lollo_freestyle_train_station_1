local _constants = require('lollo_freestyle_train_station.constants')
-- local constructionutil = require "constructionutil"
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
-- local modulesutil = require "modulesutil"
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require "transf"
local vec3 = require "vec3"


function data()

return {
	availability = {
		yearFrom = -1,
		yearTo = -1
	},
	category = {
		-- categories = { "cargo", },
	},
	cost = {
		price = 0,
	},
	description = {
		name = _("Terminal"),
		description = _("Terminal, can only be deleted, build this with the waypoints"),
		icon = "ui/empty.tga"
	},
	metadata = { },
	order = {
		value = 1,
	},
	-- skipCollision = true,
	type = _constants.passengerTerminalModuleType,
	updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, updateScriptParams)
		local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
		if not nTerminal or not baseId then return end

		moduleHelpers.edges.addEdges(result, tag, params, nTerminal)
		-- print('freestyleTrainStation result.edgeLists =') debugPrint(result.edgeLists)

		result.models[#result.models + 1] = {
			id = 'lollo_freestyle_train_station/asset/terminal_signal.mdl',
			slotId = slotId,
			transf = slotTransf,
			tag = tag
		}
		-- result.models[#result.models + 1] = {
		-- 	id = 'lollo_freestyle_train_station/icon/green.mdl',
		-- 	slotId = slotId,
		-- 	transf = slotTransf,
		-- 	tag = tag
		-- }

		-- start from 3 to avoid deco peeping out of the platform
		local isTrackOnPlatformLeft = params.terminals[nTerminal].isTrackOnPlatformLeft
		-- print('isTrackOnPlatformLeft =', isTrackOnPlatformLeft)
		-- if isTrackOnPlatformLeft then
		-- 	result.models[#result.models + 1] = {
		-- 		id = 'lollo_freestyle_train_station/icon/green.mdl',
		-- 		slotId = slotId,
		-- 		transf = slotTransf,
		-- 		tag = tag
		-- 	}
		-- else
		-- 	result.models[#result.models + 1] = {
		-- 		id = 'lollo_freestyle_train_station/icon/red.mdl',
		-- 		slotId = slotId,
		-- 		transf = slotTransf,
		-- 		tag = tag
		-- 	}
		-- end
		local isUnderpass = function(t, i)
			return params.modules[result.mangleId(t, i, _constants.idBases.underpassSlotId)] ~= nil
		end
		local isStairs2Subway = function(t, i)
			return params.modules[result.mangleId(t, i, _constants.idBases.stairs2SubwaySlotId)] ~= nil
		end
		local isPreviousUnderpass = function(t, i)
			return i > 1
				and params.modules[result.mangleId(t, i-1, _constants.idBases.underpassSlotId)] ~= nil
				or false
		end
		local xShift = 2
		for i = 3, #params.terminals[nTerminal].centrePlatformsRelative - 1, 3 do
			local cpl = params.terminals[nTerminal].centrePlatformsRelative[i]
			local platformWidth = cpl.width
			local yShift = isTrackOnPlatformLeft and platformWidth * 0.2 + 0.9 or -platformWidth * 0.2 - 0.9
			local transf = moduleHelpers.getTerminalDecoTransf(cpl.posTanX2)
			result.models[#result.models + 1] = {
				id = 'lollo_freestyle_train_station/asset/era_c_station_name.mdl',
				slotId = slotId,
				transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  xShift, yShift, 3.9, 1 }),
				tag = tag
			}
			result.models[#result.models + 1] = {
				id = 'lollo_freestyle_train_station/asset/era_c_perron_pillar.mdl',
				slotId = slotId,
				transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1.3, 0,  xShift, yShift, 0.4, 1 }),
				tag = tag
			}
			yShift = isTrackOnPlatformLeft and platformWidth * 0.2 + 0.75 or -platformWidth * 0.2 - 1.05
			result.models[#result.models + 1] = {
				id = 'lollo_freestyle_train_station/asset/neon_light.mdl',
				slotId = slotId,
				transf = transfUtilsUG.mul(transf, { 0, 1, 0, 0,  -1, 0, 0, 0,  0, 0, 1, 0,  xShift, yShift, 5.2, 1 }),
				tag = tag
			}
			yShift = isTrackOnPlatformLeft and platformWidth * 0.2 + 1.05 or -platformWidth * 0.2 - 0.75
			result.models[#result.models + 1] = {
				id = 'lollo_freestyle_train_station/asset/neon_light.mdl',
				slotId = slotId,
				transf = transfUtilsUG.mul(transf, { 0, -1, 0, 0,  1, 0, 0, 0,  0, 0, 1, 0,  xShift, yShift, 5.2, 1 }),
				tag = tag
			}
			-- if isTrackOnPlatformLeft then
			-- 	result.models[#result.models + 1] = {
			-- 		id = 'lollo_freestyle_train_station/icon/green.mdl',
			-- 		slotId = slotId,
			-- 		transf = transfUtilsUG.mul(transf, { 0, -1, 0, 0,  1, 0, 0, 0,  0, 0, 1, 0,  xShift, yShift, 5.2, 1 }),
			-- 		tag = tag
			-- 	}
			-- end
		end
		for i = 4, #params.terminals[nTerminal].centrePlatformsRelative - 1, 3 do
			if not(isUnderpass(nTerminal, i)) and not(isStairs2Subway(nTerminal, i)) then
				local cpl = params.terminals[nTerminal].centrePlatformsRelative[i]
				local platformWidth = cpl.width
				local yShift = isTrackOnPlatformLeft and platformWidth * 0.2 + 0.9 or -platformWidth * 0.2 - 0.9
				local transf = moduleHelpers.getTerminalDecoTransf(cpl.posTanX2)
				result.models[#result.models + 1] = {
					id = 'lollo_freestyle_train_station/asset/era_c_perron_number_single.mdl',
					slotId = slotId,
					transf = isTrackOnPlatformLeft
						and transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  xShift, yShift, 4.6, 1 })
						or transfUtilsUG.mul(transf, { -1, 0, 0, 0,  0, -1, 0, 0,  0, 0, 1, 0,  xShift, yShift, 4.6, 1 }),
					tag = tag
				}
				-- the model index must be in base 0 !
				result.labelText[#result.models - 1] = { tostring(nTerminal), tostring(nTerminal)}
				result.models[#result.models + 1] = {
					id = 'lollo_freestyle_train_station/asset/era_c_perron_pillar.mdl',
					slotId = slotId,
					transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1.2, 0,  xShift, yShift, 0.4, 1 }),
					tag = tag
				}
			end
		end
		for i = 2, #params.terminals[nTerminal].centrePlatformsRelative - 1, 3 do
			if not(isUnderpass(nTerminal, i)) and not(isStairs2Subway(nTerminal, i)) then
				local cpl = params.terminals[nTerminal].centrePlatformsRelative[i]
				local platformWidth = cpl.width
				local yShift = isTrackOnPlatformLeft and platformWidth * 0.2 + 0.1 or -platformWidth * 0.2 - 0.1
				local transf = moduleHelpers.getTerminalDecoTransf(cpl.posTanX2)
				result.models[#result.models + 1] = {
					-- id = 'lollo_freestyle_train_station/asset/tabellone_standing.mdl',
					id = 'lollo_freestyle_train_station/asset/arrivi.mdl',
					slotId = slotId,
					transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  1.5 + xShift, yShift, 1.1, 1 }),
					tag = tag
				}
				result.models[#result.models + 1] = {
					-- id = 'lollo_freestyle_train_station/asset/tabellone_standing.mdl',
					id = 'lollo_freestyle_train_station/asset/partenze.mdl',
					slotId = slotId,
					transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0.2 + xShift, yShift, 1.1, 1 }),
					tag = tag
				}
			end
		end
		for i = 2, #params.terminals[nTerminal].centrePlatformsRelative - 1, 1 do
			if not(isUnderpass(nTerminal, i)) and not(isStairs2Subway(nTerminal, i)) then
				local cpl = params.terminals[nTerminal].centrePlatformsRelative[i]
				local platformWidth = cpl.width

				local yShift = isTrackOnPlatformLeft and platformWidth * 0.2 + 0.0 or -platformWidth * 0.2 - 0.0
				-- local transf = moduleHelpers.getPlatformObjectTransf_WithYRotation(cpl.posTanX2)
				local transf = moduleHelpers.getPlatformObjectTransf_AlwaysVertical(cpl.posTanX2)
				result.models[#result.models + 1] = {
					-- id = 'station/rail/asset/era_c_single_chair.mdl',
					id = 'lollo_freestyle_train_station/asset/era_c_two_chairs.mdl',
					slotId = slotId,
					transf = isTrackOnPlatformLeft
						and transfUtilsUG.mul(transf, { 0, -1, 0, 0,  1, 0, 0, 0,  0, 0, 1, 0,  -1.0 + xShift, yShift, _constants.stairsAndRampHeight + 0.0, 1 })
						or transfUtilsUG.mul(transf, { 0, 1, 0, 0,  -1, 0, 0, 0,  0, 0, 1, 0,  -1.0 + xShift, yShift, _constants.stairsAndRampHeight + 0.0, 1 }),
					tag = tag
				}
				yShift = isTrackOnPlatformLeft and platformWidth * 0.2 + 0.1 or -platformWidth * 0.2 - 0.1
				result.models[#result.models + 1] = {
					id = 'station/rail/asset/era_c_trashcan.mdl',
					slotId = slotId,
					transf = transfUtilsUG.mul(transf, { 0, 1, 0, 0,  -1, 0, 0, 0,  0, 0, 1, 0,  0.3 + xShift, yShift, 1.1, 1 }),
					tag = tag
				}
			end
		end

		print('passengerTerminal.module.updateFn ending')
	end,

	getModelsFn = function(params)
		return {
			{
				id = _constants.terminalModelFileName,
				transf = transfUtilsUG.transl(vec3.new(0.0, 0.0, 0.0)),
			},
		}
	end
}

end
