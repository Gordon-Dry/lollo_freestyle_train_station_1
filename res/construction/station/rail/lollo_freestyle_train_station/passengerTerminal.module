local _constants = require('lollo_freestyle_train_station.constants')
-- local constructionutil = require "constructionutil"
local logger = require('lollo_freestyle_train_station.logger')
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
-- local modulesutil = require "modulesutil"
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require "transf"


function data()

return {
	availability = {
		yearFrom = -1,
		yearTo = -1
	},
	category = {
		-- categories = { "cargo", },
	},
	cost = {
		price = 0,
	},
	description = {
		name = _("Terminal"),
		description = _("Terminal, can only be deleted, build this with the waypoints"),
		icon = "ui/empty.tga"
	},
	metadata = { },
	order = {
		value = 1,
	},
	-- skipCollision = true,
	type = _constants.passengerTerminalModuleType,
	updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, updateScriptParams)
		local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
		if not nTerminal or not baseId then return end

		moduleHelpers.edges.addEdges(result, tag, params, nTerminal)
		-- print('freestyleTrainStation result.edgeLists =') debugPrint(result.edgeLists)
		moduleHelpers.platforms.addPlatform(result, tag, slotId, params, nTerminal)

		-- start from 3 to avoid deco peeping out of the platform
		local isTrackOnPlatformLeft = params.terminals[nTerminal].isTrackOnPlatformLeft
		if logger.isExtendedLog() then
			if isTrackOnPlatformLeft then
				result.models[#result.models + 1] = {
					id = 'lollo_freestyle_train_station/icon/green.mdl',
					slotId = slotId,
					transf = slotTransf,
					tag = tag
				}
			else
				result.models[#result.models + 1] = {
					id = 'lollo_freestyle_train_station/icon/red.mdl',
					slotId = slotId,
					transf = slotTransf,
					tag = tag
				}
			end
		end
		local isUnderpass = function(t, i)
			return (i ~= 1 and params.modules[result.mangleId(t, i-1, _constants.idBases.underpassSlotId)] ~= nil or false)
			or params.modules[result.mangleId(t, i, _constants.idBases.underpassSlotId)] ~= nil
			or params.modules[result.mangleId(t, i+1, _constants.idBases.underpassSlotId)] ~= nil
			or params.modules[result.mangleId(t, i, _constants.idBases.platformLiftSlotId)] ~= nil
		end
		local isOpenLift = function(t, i)
			return (i ~= 1 and params.modules[result.mangleId(t, i-1, _constants.idBases.openLiftSlotId)] ~= nil or false)
			or params.modules[result.mangleId(t, i, _constants.idBases.openLiftSlotId)] ~= nil
			or params.modules[result.mangleId(t, i+1, _constants.idBases.openLiftSlotId)] ~= nil
		end
		local isStairs = function(t, i)
			return (i ~= 1 and params.modules[result.mangleId(t, i-1, _constants.idBases.tunnelStairsUpSlotId)] ~= nil or false)
			or params.modules[result.mangleId(t, i, _constants.idBases.tunnelStairsUpSlotId)] ~= nil
			or params.modules[result.mangleId(t, i+1, _constants.idBases.tunnelStairsUpSlotId)] ~= nil
			or (i ~= 1 and params.modules[result.mangleId(t, i-1, _constants.idBases.tunnelStairsUpDownSlotId)] ~= nil or false)
			or params.modules[result.mangleId(t, i, _constants.idBases.tunnelStairsUpDownSlotId)] ~= nil
			or params.modules[result.mangleId(t, i+1, _constants.idBases.tunnelStairsUpDownSlotId)] ~= nil
			or (i ~= 1 and params.modules[result.mangleId(t, i-1, _constants.idBases.openStairsUpLeftSlotId)] ~= nil or false)
			or params.modules[result.mangleId(t, i, _constants.idBases.openStairsUpLeftSlotId)] ~= nil
			or params.modules[result.mangleId(t, i+1, _constants.idBases.openStairsUpLeftSlotId)] ~= nil
			or (i ~= 1 and params.modules[result.mangleId(t, i-1, _constants.idBases.openStairsUpRightSlotId)] ~= nil or false)
			or params.modules[result.mangleId(t, i, _constants.idBases.openStairsUpRightSlotId)] ~= nil
			or params.modules[result.mangleId(t, i+1, _constants.idBases.openStairsUpRightSlotId)] ~= nil
		end
		local isPlatformRoofOrWall = function(t, i)
			return params.modules[result.mangleId(t, i, _constants.idBases.platformRoofSlotId)] ~= nil
			or params.modules[result.mangleId(t, i, _constants.idBases.platformWallSlotId)] ~= nil
			or params.modules[result.mangleId(t, i+1, _constants.idBases.platformRoofSlotId)] ~= nil
			or params.modules[result.mangleId(t, i+1, _constants.idBases.platformWallSlotId)] ~= nil
			or (i ~= 1 and params.modules[result.mangleId(t, i-1, _constants.idBases.platformRoofSlotId)] ~= nil or false)
			or (i ~= 1 and params.modules[result.mangleId(t, i-1, _constants.idBases.platformWallSlotId)] ~= nil or false)
		end
		local isUnderpass_indexed = {}
		local isOpenLift_indexed = {}
		local isStairs_indexed = {}
		for i = 1, #params.terminals[nTerminal].centrePlatformsRelative, 1 do
			isUnderpass_indexed[i] = isUnderpass(nTerminal, i)
			isOpenLift_indexed[i] = isOpenLift(nTerminal, i)
			isStairs_indexed[i] = isStairs(nTerminal, i)
		end

		local xShift = 1 -- 2
		local transfXZoom = isTrackOnPlatformLeft and -1 or 1
		local transfYZoom = isTrackOnPlatformLeft and -1 or 1

		local era_a_subwayLightModelIds = {
			'lollo_freestyle_train_station/subway/era_a_lamp_hanging.mdl',
		}
		local era_b_subwayLightModelIds = {
			'lollo_freestyle_train_station/subway/era_b_lamp_hanging_orange.mdl',
			'lollo_freestyle_train_station/subway/era_b_lamp_hanging_reddish.mdl',
		}
		local era_c_subwayLightModelIds = {
			'lollo_freestyle_train_station/subway/roof_edge_w_light_5m_2m_fluo_green.mdl',
			'lollo_freestyle_train_station/subway/roof_edge_w_light_5m_2m_fluo_magenta.mdl',
			'lollo_freestyle_train_station/subway/roof_edge_w_light_5m_2m_fluo_yellow.mdl',
		}
		local era_c_centreModelIds = {
			'lollo_freestyle_train_station/asset/era_c_two_chairs.mdl',
			'station/rail/asset/era_c_trashcan.mdl',
			'lollo_freestyle_train_station/asset/era_c_two_chairs.mdl',
		}
		local era_b_centreModelIds = {
			'lollo_freestyle_train_station/asset/era_b_two_chairs.mdl',
			'station/rail/asset/era_b_trashcan.mdl',
			'lollo_freestyle_train_station/asset/era_b_two_chairs.mdl',
		}
		local era_a_centreModelIds = {
			'lollo_freestyle_train_station/asset/era_a_two_chairs.mdl',
			'station/rail/asset/era_a_trashcan.mdl',
			'lollo_freestyle_train_station/asset/era_a_two_chairs.mdl',
		}

		for ii = 1, #params.terminals[nTerminal].centrePlatformsFineRelative, 2 do
			local cpf = params.terminals[nTerminal].centrePlatformsFineRelative[ii]
			local eraPrefix = moduleHelpers.getEraPrefix(params, nTerminal, cpf.leadingIndex)
            if cpf.type == 1 then -- belly to cover pedestrian paths (only on bridges)
				-- local yShift = 0
				-- local yShift = isTrackOnPlatformLeft and 0.12 or -0.12
				local yShift = 0
				local myModelId = 'lollo_freestyle_train_station/bridge_station/belly_5m_2m.mdl'
				if cpf.width >= 5 then
					-- yShift = isTrackOnPlatformLeft and 0.12 or -0.12
				else
					-- yShift = isTrackOnPlatformLeft and 1.37 or -1.37
					myModelId = 'lollo_freestyle_train_station/bridge_station/belly_2_5m_2m.mdl'
				end
				result.models[#result.models + 1] = {
					id = myModelId,
					slotId = slotId,
					transf = transfUtilsUG.mul(
						moduleHelpers.getPlatformObjectTransf_WithYRotation(cpf.posTanX2),
						{ transfXZoom, 0, 0, 0,  0, transfYZoom, 0, 0,  0, 0, 1, 0,  0, yShift, 1.0, 1 }
					),
					tag = tag
				}
			elseif cpf.type == 2 then -- lights (only in tunnels)
				if (cpf.width >= 5 and eraPrefix == moduleHelpers.eras.era_c.prefix)
				or not(isStairs_indexed[cpf.leadingIndex]) then
					local yShift = 0
					if cpf.width >= 5 then
						yShift = isTrackOnPlatformLeft and 0.12 or -0.12
					else
						yShift = isTrackOnPlatformLeft and 1.37 or -1.37
					end
					local myTransf = transfUtilsUG.mul(
						moduleHelpers.getPlatformObjectTransf_WithYRotation(cpf.posTanX2),
						{ transfXZoom, 0, 0, 0,  0, transfYZoom, 0, 0,  0, 0, 1, 0,  0, yShift, 1.0, 1 }
					)
					local lightsModelId = nil
					if eraPrefix == moduleHelpers.eras.era_a.prefix then lightsModelId = era_a_subwayLightModelIds[1]
					elseif eraPrefix == moduleHelpers.eras.era_b.prefix then lightsModelId = era_b_subwayLightModelIds[math.random(#era_b_subwayLightModelIds)]
					else lightsModelId = era_c_subwayLightModelIds[math.random(#era_c_subwayLightModelIds)]
					end
					result.models[#result.models + 1] = {
						id = lightsModelId,
						slotId = slotId,
						transf = myTransf,
						tag = tag
					}
				end
			end
		end
		-- station name signs
		for ii, _ in pairs(moduleHelpers.deco.getStationSignFineIndexes(params, nTerminal)) do
		-- for i = 3, #params.terminals[nTerminal].centrePlatformsRelative - 1, 6 do
			-- local cpl = params.terminals[nTerminal].centrePlatformsRelative[ii]
			local cpf = params.terminals[nTerminal].centrePlatformsFineRelative[ii]
			local platformWidth = cpf.width
			local eraPrefix = moduleHelpers.getEraPrefix(params, nTerminal, cpf.leadingIndex)
			if cpf.type == 2 then -- tunnel
				if cpf.width >= 5 or not(isStairs_indexed[cpf.leadingIndex]) then
					local yShift = 0
					if cpf.width >= 5 then
						yShift = isTrackOnPlatformLeft and 0.22 or -0.22
					else
						yShift = isTrackOnPlatformLeft and 1.47 or -1.47
					end

					local myTransf = transfUtilsUG.mul(
						moduleHelpers.getPlatformObjectTransf_WithYRotation(cpf.posTanX2),
						{ transfXZoom, 0, 0, 0,  0, transfYZoom, 0, 0,  0, 0, 1, 0,  0, yShift, 0.5, 1 }
					)
					local stationSignModelId = 'lollo_freestyle_train_station/subway/roof_edge_w_station_name_5m_2m.mdl'
					if eraPrefix == moduleHelpers.eras.era_b.prefix then stationSignModelId = 'lollo_freestyle_train_station/subway/era_b_station_sign_single.mdl'
					elseif eraPrefix == moduleHelpers.eras.era_a.prefix then stationSignModelId = 'lollo_freestyle_train_station/subway/era_a_station_sign_double.mdl'
					end
					result.models[#result.models + 1] = {
						id = stationSignModelId,
						slotId = slotId,
						transf = myTransf,
						tag = tag
					}
				end
			elseif platformWidth > 4
			or (not(isUnderpass_indexed[cpf.leadingIndex]) and not(isOpenLift_indexed[cpf.leadingIndex]) and not(isStairs_indexed[cpf.leadingIndex]))
			then
				local transf = moduleHelpers.getTerminalDecoTransf(cpf.posTanX2)
				-- sign near the track
				-- local yShift = isTrackOnPlatformLeft and platformWidth * 0.5 + 0.25 or -platformWidth * 0.5 - 0.25
				-- sign 1.5 m from the track
				local yShift = isTrackOnPlatformLeft and platformWidth * 0.5 - 0.75 or -platformWidth * 0.5 + 0.75
				-- sign 4.8 m or 2.3 m from the track
				-- local yShift = isTrackOnPlatformLeft and - platformWidth * 0.5 + 0.25 or platformWidth * 0.5 - 0.25
				local modelId = 'lollo_freestyle_train_station/asset/era_c_station_sign.mdl'
				if eraPrefix == moduleHelpers.eras.era_a.prefix then
					modelId = 'lollo_freestyle_train_station/asset/era_a_station_sign_on_pole.mdl'
				elseif eraPrefix == moduleHelpers.eras.era_b.prefix then
					modelId = 'lollo_freestyle_train_station/asset/era_b_station_sign_on_pole.mdl'
				end
				result.models[#result.models + 1] = {
					id = modelId,
					slotId = slotId,
					transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  xShift + 2, yShift, result.laneZs[nTerminal] + 0.0, 1 }),
					tag = tag
				}
			end
		end
		-- platform number signs
		-- for i = 4, #params.terminals[nTerminal].centrePlatformsRelative - 1, 6 do
		for ii = 3 + _constants.maxPassengerWaitingAreaEdgeLength, #params.terminals[nTerminal].centrePlatformsFineRelative - 2, _constants.maxPassengerWaitingAreaEdgeLength * 2 do
			local cpf = params.terminals[nTerminal].centrePlatformsFineRelative[ii]
			local platformWidth = cpf.width
			local eraPrefix = moduleHelpers.getEraPrefix(params, nTerminal, cpf.leadingIndex)
			if cpf.type == 2 then -- tunnel
				if cpf.width >= 5 or not(isStairs_indexed[cpf.leadingIndex]) then
					-- local yShift = isTrackOnPlatformLeft and platformWidth * 0.5 - 0.05 or -platformWidth * 0.5 + 0.05
					local yShift = isTrackOnPlatformLeft and platformWidth * 0.2 + 0.9 or -platformWidth * 0.2 - 0.9
					local modelId = 'lollo_freestyle_train_station/subway/era_c_perron_number_hanging.mdl'
					if eraPrefix == moduleHelpers.eras.era_a.prefix then modelId = 'lollo_freestyle_train_station/subway/era_a_perron_number_hanging.mdl'
					elseif eraPrefix == moduleHelpers.eras.era_b.prefix then modelId = 'lollo_freestyle_train_station/subway/era_b_perron_number_hanging_plain.mdl'
					end
					result.models[#result.models + 1] = {
						id = modelId,
						slotId = slotId,
						transf = transfUtilsUG.mul(
							moduleHelpers.getTerminalDecoTransf(cpf.posTanX2),
							{ -transfXZoom, 0, 0, 0,  0, -transfYZoom, 0, 0,  0, 0, 1, 0,  xShift, yShift, 4.6, 1 }
						),
						tag = tag
					}
					-- the model index must be in base 0 !
					result.labelText[#result.models - 1] = { tostring(nTerminal), tostring(nTerminal) }
				end
			else
				if not(isPlatformRoofOrWall(nTerminal, cpf.leadingIndex))
				and (platformWidth > 4 or (not(isUnderpass_indexed[cpf.leadingIndex])
				and not(isOpenLift_indexed[cpf.leadingIndex])
				and not(isStairs_indexed[cpf.leadingIndex]))) then
					-- very close to the track
					-- local yShift = isTrackOnPlatformLeft and platformWidth * 0.5 + 0.25 or -platformWidth * 0.5 - 0.25
					-- sign 1.5 m from the track and facing outwards
					local yShift = isTrackOnPlatformLeft and (platformWidth * 0.5 - 0.75) or (-platformWidth * 0.5 + 0.75)
					local modelId = 'lollo_freestyle_train_station/asset/era_c_perron_number.mdl'
					if eraPrefix == moduleHelpers.eras.era_a.prefix then modelId = 'lollo_freestyle_train_station/asset/era_a_perron_number.mdl'
					elseif eraPrefix == moduleHelpers.eras.era_b.prefix then modelId = 'lollo_freestyle_train_station/asset/era_b_perron_number.mdl'
					end
					result.models[#result.models + 1] = {
						id = modelId,
						slotId = slotId,
						transf = transfUtilsUG.mul(
							moduleHelpers.getTerminalDecoTransf(cpf.posTanX2),
							{ transfXZoom, 0, 0, 0,  0, transfYZoom, 0, 0,  0, 0, 1, 0,  xShift, yShift, result.laneZs[nTerminal] + 0.0, 1 }
						),
						tag = tag
					}
					result.labelText[#result.models - 1] = { tostring(nTerminal), tostring(nTerminal) }
				end
			end
		end
		-- arrivals and departure tables
		for i = 2, #params.terminals[nTerminal].centrePlatformsRelative - 1, 3 do
			if not(isUnderpass_indexed[i]) and not(isOpenLift_indexed[i]) and not(isStairs_indexed[i]) then
				local cpl = params.terminals[nTerminal].centrePlatformsRelative[i]
				local eraPrefix = moduleHelpers.getEraPrefix(params, nTerminal, i)
				local platformWidth = cpl.width
				local yShift = isTrackOnPlatformLeft and platformWidth * 0.2 + 0.1 or -platformWidth * 0.2 - 0.1
				-- local transf = moduleHelpers.getTerminalDecoTransf(cpl.posTanX2)
				local transf = moduleHelpers.getPlatformObjectTransf_AlwaysVertical(cpl.posTanX2)
				if eraPrefix == moduleHelpers.eras.era_a.prefix then
					result.models[#result.models + 1] = {
						id = 'lollo_freestyle_train_station/asset/era_a_arrivals_departures_column.mdl',
						slotId = slotId,
						transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  -1.7 + xShift, yShift, result.laneZs[nTerminal], 1 }),
						tag = tag
					}
				elseif eraPrefix == moduleHelpers.eras.era_b.prefix then
					result.models[#result.models + 1] = {
						id = 'lollo_freestyle_train_station/asset/era_b_arrivals_departures_column.mdl',
						slotId = slotId,
						transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  -1.7 + xShift, yShift, result.laneZs[nTerminal], 1 }),
						tag = tag
					}
				else
					result.models[#result.models + 1] = {
						id = 'lollo_freestyle_train_station/asset/arrivi.mdl',
						slotId = slotId,
						transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  -0.6 + xShift, yShift, result.laneZs[nTerminal], 1 }),
						tag = tag
					}
					result.models[#result.models + 1] = {
						id = 'lollo_freestyle_train_station/asset/partenze.mdl',
						slotId = slotId,
						transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  -1.9 + xShift, yShift, result.laneZs[nTerminal], 1 }),
						tag = tag
					}
				end
			end
		end
		-- chairs, rubbish bins etc
		for i = 2, #params.terminals[nTerminal].centrePlatformsRelative - 1, 1 do
			if not(isUnderpass_indexed[i]) and not(isOpenLift_indexed[i]) and not(isStairs_indexed[i]) then
				local cpl = params.terminals[nTerminal].centrePlatformsRelative[i]
				local eraPrefix = moduleHelpers.getEraPrefix(params, nTerminal, i)
				local platformWidth = cpl.width

				local transf = moduleHelpers.getPlatformObjectTransf_AlwaysVertical(cpl.posTanX2)
				local myModelId = nil
				if eraPrefix == moduleHelpers.eras.era_a.prefix then
					myModelId = era_a_centreModelIds[math.random(#era_a_centreModelIds)]
				elseif eraPrefix == moduleHelpers.eras.era_b.prefix then
					myModelId = era_b_centreModelIds[math.random(#era_b_centreModelIds)]
				else
					myModelId = era_c_centreModelIds[math.random(#era_c_centreModelIds)]
				end
				local yShift = isTrackOnPlatformLeft and platformWidth * 0.2 + 0.1 or -platformWidth * 0.2 - 0.1
				result.models[#result.models + 1] = {
					id = myModelId,
					slotId = slotId,
					transf = transfUtilsUG.mul(transf, { 0, transfYZoom, 0, 0,  transfXZoom, 0, 0, 0,  0, 0, 1, 0,  1.3 + xShift, yShift, result.laneZs[nTerminal], 1 }),
					tag = tag
				}
			end
		end

		-- logger.print('passengerTerminal.module.updateFn ending')
	end,

	getModelsFn = function(params)
		return {
			{
				id = _constants.terminalModelFileName,
				transf = _constants.idTransf,
			},
		}
	end
}

end
