local _constants = require('lollo_freestyle_train_station.constants')
-- local constructionutil = require "constructionutil"
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
-- local modulesutil = require "modulesutil"
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require "transf"
local vec3 = require "vec3"


function data()

return {
	availability = {
		yearFrom = -1,
		yearTo = -1
	},
	category = {
		-- categories = { "cargo", },
	},
	cost = {
		price = 0,
	},
	description = {
		name = _("Terminal"),
		description = _("Terminal, can only be deleted, build this with the waypoints"),
		icon = "ui/empty.tga"
	},
	metadata = { },
	order = {
		value = 1,
	},
	-- skipCollision = true,
	type = _constants.passengerTerminalModuleType,
	updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, updateScriptParams)
		local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
		if not nTerminal or not baseId then return end

		moduleHelpers.edges.addEdges(result, tag, params, nTerminal)
		-- print('freestyleTrainStation result.edgeLists =') debugPrint(result.edgeLists)

		result.models[#result.models + 1] = {
			id = 'lollo_freestyle_train_station/asset/terminal_signal.mdl',
			slotId = slotId,
			transf = slotTransf,
			tag = tag
		}
		-- result.models[#result.models + 1] = {
		-- 	id = 'lollo_freestyle_train_station/icon/green.mdl',
		-- 	slotId = slotId,
		-- 	transf = slotTransf,
		-- 	tag = tag
		-- }

		-- start from 3 to avoid deco peeping out of the platform
		local isTrackOnPlatformLeft = params.terminals[nTerminal].isTrackOnPlatformLeft
		-- print('isTrackOnPlatformLeft =', isTrackOnPlatformLeft)
		-- if isTrackOnPlatformLeft then
		-- 	result.models[#result.models + 1] = {
		-- 		id = 'lollo_freestyle_train_station/icon/green.mdl',
		-- 		slotId = slotId,
		-- 		transf = slotTransf,
		-- 		tag = tag
		-- 	}
		-- else
		-- 	result.models[#result.models + 1] = {
		-- 		id = 'lollo_freestyle_train_station/icon/red.mdl',
		-- 		slotId = slotId,
		-- 		transf = slotTransf,
		-- 		tag = tag
		-- 	}
		-- end
		local isUnderpass = function(t, i)
			return params.modules[result.mangleId(t, i, _constants.idBases.underpassSlotId)] ~= nil
			or params.modules[result.mangleId(t, i, _constants.idBases.platformLiftSlotId)] ~= nil
		end
		local isStairs2Subway = function(t, i)
			return params.modules[result.mangleId(t, i, _constants.idBases.stairs2SubwaySlotId)] ~= nil
		end
		local isPreviousUnderpass = function(t, i)
			return i > 1
				and params.modules[result.mangleId(t, i-1, _constants.idBases.underpassSlotId)] ~= nil
				or false
		end
		local isPlatformRoof = function(t, i)
			return params.modules[result.mangleId(t, i, _constants.idBases.platformRoofSlotId)] ~= nil
		end
		local xShift = 1 -- 2
		local transfXZoom = isTrackOnPlatformLeft and -1 or 1
		local transfYZoom = isTrackOnPlatformLeft and -1 or 1

		local _subwayLightModelIds = {
			'lollo_freestyle_train_station/subway/roof_edge_w_light_5m_2m_fluo_green.mdl',
			'lollo_freestyle_train_station/subway/roof_edge_w_light_5m_2m_fluo_magenta.mdl',
			'lollo_freestyle_train_station/subway/roof_edge_w_light_5m_2m_fluo_yellow.mdl',
		}
		local _centreModelIds = {
			'lollo_freestyle_train_station/asset/era_c_two_chairs.mdl',
			'station/rail/asset/era_c_trashcan.mdl',
			'lollo_freestyle_train_station/asset/era_c_two_chairs.mdl',
		}

		for ii = 1, #params.terminals[nTerminal].centrePlatformsFineRelative, 2 do
			local cpf = params.terminals[nTerminal].centrePlatformsFineRelative[ii]
            local cpl = params.terminals[nTerminal].centrePlatformsRelative[cpf.leadingIndex]
            if cpl.type == 1 then -- belly to cover pedestrian paths (only on bridges)
				local yShift = 0
				local myModelId = 'lollo_freestyle_train_station/bridge_station/belly_5m_2m.mdl'
				if cpl.width >= 5 then
					yShift = isTrackOnPlatformLeft and 0.12 or -0.12
				else
					yShift = isTrackOnPlatformLeft and 1.37 or -1.37
					myModelId = 'lollo_freestyle_train_station/bridge_station/belly_2_5m_2m.mdl'
				end
				local myTransf = transfUtilsUG.mul(
					moduleHelpers.getPlatformObjectTransf_WithYRotation(cpf.posTanX2),
					{ transfXZoom, 0, 0, 0,  0, transfYZoom, 0, 0,  0, 0, 1, 0,  0, yShift, 1.0, 1 }
				)
				result.models[#result.models + 1] = {
					id = myModelId,
					slotId = slotId,
					transf = myTransf,
					tag = tag
				}
			elseif cpl.type == 2 then -- lights (only in tunnels)
				if cpl.width >= 5 or not(isStairs2Subway(nTerminal, cpf.leadingIndex)) then
					local yShift = 0
					if cpl.width >= 5 then
						yShift = isTrackOnPlatformLeft and 0.12 or -0.12
					else
						yShift = isTrackOnPlatformLeft and 1.37 or -1.37
					end
					local myTransf = transfUtilsUG.mul(
						moduleHelpers.getPlatformObjectTransf_WithYRotation(cpf.posTanX2),
						{ transfXZoom, 0, 0, 0,  0, transfYZoom, 0, 0,  0, 0, 1, 0,  0, yShift, 1.0, 1 }
					)
					local myModelId = _subwayLightModelIds[math.random(#_subwayLightModelIds)]
					result.models[#result.models + 1] = {
						id = myModelId,
						slotId = slotId,
						transf = myTransf,
						tag = tag
					}
				end
			end
		end
		-- station name plaques
		for i = 3, #params.terminals[nTerminal].centrePlatformsRelative - 1, 3 do
			local cpl = params.terminals[nTerminal].centrePlatformsRelative[i]
			local platformWidth = cpl.width
			if cpl.type == 2 then -- tunnel
				if cpl.width >= 5 or not(isStairs2Subway(nTerminal, i)) then
					local yShift = 0
					if cpl.width >= 5 then
						yShift = isTrackOnPlatformLeft and 0.22 or -0.22
					else
						yShift = isTrackOnPlatformLeft and 1.47 or -1.47
					end

					local myTransf = transfUtilsUG.mul(
						moduleHelpers.getPlatformObjectTransf_WithYRotation(cpl.posTanX2),
						{ transfXZoom, 0, 0, 0,  0, transfYZoom, 0, 0,  0, 0, 1, 0,  0, yShift, 0.5, 1 }
					)
					result.models[#result.models + 1] = {
						id = 'lollo_freestyle_train_station/subway/roof_edge_w_station_name_5m_2m.mdl',
						slotId = slotId,
						transf = myTransf,
						tag = tag
					}
				end
			else
				local yShift = isTrackOnPlatformLeft and platformWidth * 0.2 + 0.9 or -platformWidth * 0.2 - 0.9
				local transf = moduleHelpers.getTerminalDecoTransf(cpl.posTanX2)
				result.models[#result.models + 1] = {
					id = 'lollo_freestyle_train_station/asset/era_c_station_name.mdl',
					slotId = slotId,
					transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  xShift, yShift, result.laneZs[nTerminal] + 2.7, 1 }),
					tag = tag
				}
				result.models[#result.models + 1] = {
					id = 'lollo_freestyle_train_station/asset/era_c_perron_pillar.mdl',
					slotId = slotId,
					transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1.3, 0,  xShift, yShift, result.laneZs[nTerminal] - 0.8, 1 }),
					tag = tag
				}
				yShift = isTrackOnPlatformLeft and platformWidth * 0.2 + 0.75 or -platformWidth * 0.2 - 1.05
				result.models[#result.models + 1] = {
					id = 'lollo_freestyle_train_station/asset/neon_light.mdl',
					slotId = slotId,
					transf = transfUtilsUG.mul(transf, { 0, 1, 0, 0,  -1, 0, 0, 0,  0, 0, 1, 0,  xShift, yShift, result.laneZs[nTerminal] + 4.0, 1 }),
					tag = tag
				}
				yShift = isTrackOnPlatformLeft and platformWidth * 0.2 + 1.05 or -platformWidth * 0.2 - 0.75
				result.models[#result.models + 1] = {
					id = 'lollo_freestyle_train_station/asset/neon_light.mdl',
					slotId = slotId,
					transf = transfUtilsUG.mul(transf, { 0, -1, 0, 0,  1, 0, 0, 0,  0, 0, 1, 0,  xShift, yShift, result.laneZs[nTerminal] + 4.0, 1 }),
					tag = tag
				}
			end
		end
		-- platform number signs
		for i = 4, #params.terminals[nTerminal].centrePlatformsRelative - 1, 3 do
			local cpl = params.terminals[nTerminal].centrePlatformsRelative[i]
			local platformWidth = cpl.width
			if cpl.type == 2 then -- tunnel
				if cpl.width >= 5 or not(isStairs2Subway(nTerminal, i)) then
					-- local yShift = isTrackOnPlatformLeft and platformWidth * 0.5 - 0.05 or -platformWidth * 0.5 + 0.05
					local yShift = isTrackOnPlatformLeft and platformWidth * 0.2 + 0.9 or -platformWidth * 0.2 - 0.9
					local transf = moduleHelpers.getTerminalDecoTransf(cpl.posTanX2)
					result.models[#result.models + 1] = {
						id = 'lollo_freestyle_train_station/subway/era_c_perron_number_single_hanging.mdl',
						slotId = slotId,
						transf = transfUtilsUG.mul(transf, { -transfXZoom, 0, 0, 0,  0, -transfYZoom, 0, 0,  0, 0, 1, 0,  xShift, yShift, 4.6, 1 }),
						tag = tag
					}
					-- the model index must be in base 0 !
					result.labelText[#result.models - 1] = { tostring(nTerminal), tostring(nTerminal)}
				end
			elseif not(isUnderpass(nTerminal, i)) and not(isPlatformRoof(nTerminal, i)) then
				local yShift = isTrackOnPlatformLeft and platformWidth * 0.2 + 0.9 or -platformWidth * 0.2 - 0.9
				local transf = moduleHelpers.getTerminalDecoTransf(cpl.posTanX2)
				result.models[#result.models + 1] = {
					id = 'lollo_freestyle_train_station/asset/era_c_perron_number_single.mdl',
					slotId = slotId,
					transf = transfUtilsUG.mul(transf, { -transfXZoom, 0, 0, 0,  0, -transfYZoom, 0, 0,  0, 0, 1, 0,  xShift, yShift, result.laneZs[nTerminal] + 3.4, 1 }),
					tag = tag
				}
				-- the model index must be in base 0 !
				result.labelText[#result.models - 1] = { tostring(nTerminal), tostring(nTerminal)}
				result.models[#result.models + 1] = {
					id = 'lollo_freestyle_train_station/asset/era_c_perron_pillar.mdl',
					slotId = slotId,
					transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1.2, 0,  xShift, yShift, result.laneZs[nTerminal] - 0.8, 1 }),
					tag = tag
				}
			end
		end
		for i = 2, #params.terminals[nTerminal].centrePlatformsRelative - 1, 3 do
			if not(isUnderpass(nTerminal, i)) and not(isStairs2Subway(nTerminal, i)) then
				local cpl = params.terminals[nTerminal].centrePlatformsRelative[i]
				local platformWidth = cpl.width
				local yShift = isTrackOnPlatformLeft and platformWidth * 0.2 + 0.1 or -platformWidth * 0.2 - 0.1
				local transf = moduleHelpers.getTerminalDecoTransf(cpl.posTanX2)
				result.models[#result.models + 1] = {
					id = 'lollo_freestyle_train_station/asset/arrivi.mdl',
					slotId = slotId,
					transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  2.1 + xShift, yShift, result.laneZs[nTerminal] + 0.1, 1 }),
					tag = tag
				}
				result.models[#result.models + 1] = {
					id = 'lollo_freestyle_train_station/asset/partenze.mdl',
					slotId = slotId,
					transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0.8 + xShift, yShift, result.laneZs[nTerminal] + 0.1, 1 }),
					tag = tag
				}
			end
		end
		for i = 2, #params.terminals[nTerminal].centrePlatformsRelative - 1, 1 do
			if not(isUnderpass(nTerminal, i)) and not(isStairs2Subway(nTerminal, i)) then
				local cpl = params.terminals[nTerminal].centrePlatformsRelative[i]
				local platformWidth = cpl.width

				local transf = moduleHelpers.getPlatformObjectTransf_AlwaysVertical(cpl.posTanX2)
				local myModelId = _centreModelIds[math.random(#_centreModelIds)]
				local yShift = isTrackOnPlatformLeft and platformWidth * 0.2 + 0.1 or -platformWidth * 0.2 - 0.1
				result.models[#result.models + 1] = {
					id = myModelId,
					slotId = slotId,
					transf = transfUtilsUG.mul(transf, { 0, transfYZoom, 0, 0,  transfXZoom, 0, 0, 0,  0, 0, 1, 0,  1.3 + xShift, yShift, result.laneZs[nTerminal] + 0.0, 1 }),
					tag = tag
				}
			end
		end

		print('passengerTerminal.module.updateFn ending')
	end,

	getModelsFn = function(params)
		return {
			{
				id = _constants.terminalModelFileName,
				transf = transfUtilsUG.transl(vec3.new(0.0, 0.0, 0.0)),
			},
		}
	end
}

end
