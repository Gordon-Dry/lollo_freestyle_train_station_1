local _constants = require('lollo_freestyle_train_station.constants')
-- local constructionutil = require "constructionutil"
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
-- local modulesutil = require "modulesutil"
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require "transf"
local vec3 = require "vec3"


function data()

return {
	availability = {
		yearFrom = -1,
		yearTo = -1
	},
	cost = {
		price = 0,
	},
	category = {
		-- categories = { "cargo", },
	},
	description = {
		name = _("Terminal"),
		description = _("Terminal, can only be deleted, build this with the waypoints"),
		icon = "ui/construction/station/street/cargo_area_inner_12x12.tga"
	},
	metadata = {
		-- cargo = true,
	},
	order = {
		value = 1,
	},
	type = _constants.passengerTerminalModuleType,
	updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, callback)
		local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
		if not nTerminal or not baseId then return end

		print('LOLLO passenger terminal module received slotId, nTerminal, nTrackEdge, baseId = ', slotId, nTerminal, nTrackEdge, baseId)
		-- print('LOLLO result =') debugPrint(result)
		print('slotTransf =') debugPrint(slotTransf) -- LOLLO NOTE we only use slotTransf to place the slot! The coords are absolute.
		-- print('params =') debugPrint(params)
		-- params are the station params
		-- addModelFn(_constants.cargoAreaInner12x12ModelFileName, transf.transl(vec3.new(0, 0, 0)), modelTag)

		local mainTransf = params.mainTransf
		local inverseMainTransf = transfUtils.getInverseTransf(mainTransf)

		-- LOLLO TODO make some visible model so the user knows where to click to delete a terminal
		result.models[#result.models + 1] = {
			id = 'lollo_freestyle_train_station/icon/green.mdl',
			slotId = slotId,
			transf = slotTransf,
			tag = _constants.terminalModelTag
		}

		-- start from 3 to avoid deco peeping out of the platform
		local yShift = 1
		for i = 3, #params.terminals[nTerminal].centreLanePositions, _constants.terminalAssetStep do
			-- print('i =', i)
			local wap = params.terminals[nTerminal].centreLanePositions[i]
			-- print('wap = ') debugPrint(wap)
			local posTanX2 = transfUtils.getPosTanX2Transformed(wap.posTanX2, inverseMainTransf)
			-- print('posTanX2 =') debugPrint(posTanX2)
			local transf = moduleHelpers.getTerminalDecoTransf(posTanX2)
			-- print('transf =') debugPrint(transf)
			result.models[#result.models + 1] = {
				-- LOLLO TODO display the correct station name. With cargo + passenger stations, this is broken
				id = 'lollo_freestyle_train_station/asset/era_c_station_name.mdl',
				slotId = slotId,
				transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, yShift, 3, 1 }),
				tag = _constants.terminalModelTag
			}
			result.models[#result.models + 1] = {
				id = 'station/rail/asset/era_c_perron_pillar.mdl',
				slotId = slotId,
				transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, yShift, 0, 1 }),
				tag = _constants.terminalModelTag
			}
			yShift = - yShift
		end
		for i = 2, #params.terminals[nTerminal].centreLanePositions, _constants.terminalAssetStep do
			-- print('i =', i)
			local wap = params.terminals[nTerminal].centreLanePositions[i]
			-- print('wap = ') debugPrint(wap)
			local posTanX2 = transfUtils.getPosTanX2Transformed(wap.posTanX2, inverseMainTransf)
			-- print('posTanX2 =') debugPrint(posTanX2)
			local transf = moduleHelpers.getTerminalDecoTransf(posTanX2)
			-- print('transf =') debugPrint(transf)
			result.models[#result.models + 1] = {
				id = 'lollo_freestyle_train_station/asset/era_c_perron_number.mdl',
				slotId = slotId,
				transf = transfUtilsUG.mul(transf, { 0, -yShift, 0, 0,  yShift, 0, 0, 0,  0, 0, 1, 0,  0, yShift, 3.5, 1 }),
				tag = _constants.terminalModelTag
			}
			-- the model index must be in base 0 !
			result.labelText[#result.models - 1] = { tostring(nTerminal), tostring(nTerminal), tostring(nTerminal), tostring(nTerminal)}
			result.models[#result.models + 1] = {
				id = 'station/rail/asset/era_c_perron_pillar.mdl',
				slotId = slotId,
				transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, yShift, 0, 1 }),
				tag = _constants.terminalModelTag
			}
			yShift = - yShift
		end
		for i = 4, #params.terminals[nTerminal].centreLanePositions, _constants.terminalAssetStep do
			-- print('i =', i)
			local wap = params.terminals[nTerminal].centreLanePositions[i]
			-- print('wap = ') debugPrint(wap)
			local posTanX2 = transfUtils.getPosTanX2Transformed(wap.posTanX2, inverseMainTransf)
			-- print('posTanX2 =') debugPrint(posTanX2)
			local transf = moduleHelpers.getTerminalDecoTransf(posTanX2)
			-- print('transf =') debugPrint(transf)
			result.models[#result.models + 1] = {
				-- id = 'lollo_freestyle_train_station/asset/tabellone_standing.mdl',
				id = 'lollo_freestyle_train_station/asset/arrivi.mdl',
				slotId = slotId,
				transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0.7, yShift, 0.7, 1 }),
				tag = _constants.terminalModelTag
			}
			result.models[#result.models + 1] = {
				-- id = 'lollo_freestyle_train_station/asset/tabellone_standing.mdl',
				id = 'lollo_freestyle_train_station/asset/partenze.mdl',
				slotId = slotId,
				transf = transfUtilsUG.mul(transf, { 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  -0.7, yShift, 0.7, 1 }),
				tag = _constants.terminalModelTag
			}
			yShift = - yShift
		end

		-- local face = {
		-- 	{-7, -7, 0, 1},
		-- 	{-7, 7, 0, 1},
		-- 	{7, 7, 0, 1},
		-- 	{7, -7, 0, 1},
		-- }
		-- modulesutil.TransformFaces(slotTransf, face)
		-- result.groundFaces[#result.groundFaces + 1] = moduleHelpers.getGroundFace(face, 'shared/asphalt_01.gtex.lua')
		-- result.terrainAlignmentLists[#result.terrainAlignmentLists + 1] = moduleHelpers.getTerrainAlignmentList(face)
	end,

	getModelsFn = function(params)
		return {
			{
				id = _constants.terminalModelFileName,
				transf = transfUtilsUG.transl(vec3.new(0.0, 0.0, 0.0)),
			},
		}
	end
}

end
