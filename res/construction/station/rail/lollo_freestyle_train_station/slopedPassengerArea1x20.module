local _constants = require('lollo_freestyle_train_station.constants')
-- local constructionutil = require "constructionutil"
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
local modulesutil = require "modulesutil"
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require "transf"
local vec3 = require "vec3"


function data()

return {
	availability = {
		yearFrom = 0,
		yearTo = 0
	},
	category = {
		categories = { "passenger-platform-extensions", },
	},
	cost = {
		price = 0,
	},
	description = {
		name = _("SlopedPassengerArea1x20Name"),
		description = _("SlopedPassengerArea1x20Desc"),
		icon = "ui/lollo_freestyle_train_station/passenger_area_1x20.tga"
	},
	metadata = { },
	order = {
		value = 23,
	},
	type = _constants.slopedPassengerArea1x20ModuleType,
	updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, updateScriptParams)
		local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
		if not nTerminal or not nTrackEdge or not baseId then return end

		local isTrackOnPlatformLeft = params.terminals[nTerminal].isTrackOnPlatformLeft
		local inverseMainTransf = transfUtils.getInverseTransf(params.mainTransf)

		local ii1 = nTrackEdge - 1
		local iiN = nTrackEdge + 1
		for ii = 1, #params.terminals[nTerminal].centrePlatformsFine do
			if params.terminals[nTerminal].centrePlatformsFine[ii].leadingIndex > iiN then break end
			if params.terminals[nTerminal].centrePlatformsFine[ii].leadingIndex >= ii1 then
			-- if params.terminals[nTerminal].centrePlatformsFine[ii].leadingIndex >= ii1
			-- and params.terminals[nTerminal].centrePlatformsFine[ii].leadingIndex <= iiN then
				local cpf = params.terminals[nTerminal].centrePlatformsFine[ii]
				local cpfPosTanX2 = transfUtils.getPosTanX2Transformed(cpf.posTanX2, inverseMainTransf)
				local yShiftOutside = moduleHelpers.getYShift4SlopedArea(params, nTerminal, cpf.leadingIndex, 20)
				result.models[#result.models+1] = {
					id = _constants.slopedPassengerArea1x20ModelFileName,
					transf = transfUtilsUG.mul(
						moduleHelpers.getPlatformObjectTransf_WithYRotation(cpfPosTanX2),
						{ 0, 1, 0, 0,  -1, 0, 0, 0,  0, 0, 1, 0,  0, yShiftOutside, _constants.platformSideBitsZ, 1 }
					),
					tag = tag
				}
			end
		end

		if params.terminals[nTerminal].centrePlatforms[nTrackEdge].type == 0 then -- only align terrain if on ground
			local face = {
				{-10.5, -13, 0, 1},
				{-10.5, 13, 0, 1},
				{10.5, 13, 0, 1},
				{10.5, -13, 0, 1},
			}
			modulesutil.TransformFaces(slotTransf, face)
			result.groundFaces[#result.groundFaces + 1] = moduleHelpers.getGroundFace(face, 'shared/asphalt_01.gtex.lua')
			result.terrainAlignmentLists[#result.terrainAlignmentLists + 1] = moduleHelpers.getTerrainAlignmentList(face, 0, 'EQUAL', 1, 0.5)
		end
	end,

	getModelsFn = function(params)
		local results = {}
		for y = -10, 10 do
			results[#results+1] = {
				id = _constants.slopedPassengerArea1x20ModelFileName,
				transf = {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, y, 0, 1},
			}
		end
		return results
	end
}

end
