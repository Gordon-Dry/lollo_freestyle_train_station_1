local _constants = require('lollo_freestyle_train_station.constants')
-- local constructionutil = require "constructionutil"
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
local modulesutil = require "modulesutil"
local slotHelpers = require('lollo_freestyle_train_station.slotHelpers')
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require "transf"
local vec3 = require "vec3"


function data()
return {
	availability = {
		yearFrom = 0,
		yearTo = 0
	},
	category = {
		categories = { "cargo-platform-extensions", },
	},
	cost = {
		price = 0,
	},
	description = {
		name = _("SlopedCargoAreaWaiting1x20Name"),
		description = _("SlopedCargoAreaWaiting1x20Desc"),
		icon = "ui/lollo_freestyle_train_station/cargo_area_waiting_1x20.tga"
	},
	metadata = { },
	order = {
		value = 26,
	},
	type = _constants.slopedCargoArea1x20ModuleType,
	updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, updateScriptParams)
		local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
		if not nTerminal or not nTrackEdge or not baseId then return end

		local paths = moduleHelpers.slopedAreas.getPaths(params, nTerminal, nTrackEdge, 20)
		-- local faces = {}
		-- print('paths =') debugPrint(paths)
		local averageXScaleFactor = 0
		for ii = 1, #paths do
			local posTanX2 = transfUtils.getPosTanX2Transformed(paths[ii].posTanX2, result.inverseMainTransf)
			local myTransf = moduleHelpers.getPlatformObjectTransf_WithYRotation(posTanX2)
			-- print('paths[ii].posTanX2[1][2] =') debugPrint(paths[ii].posTanX2[1][2])
			-- print('paths[ii].posTanX2[2][2] =') debugPrint(paths[ii].posTanX2[2][2])
			local xScaleFactor = (transfUtils.getVectorLength(paths[ii].posTanX2[1][2]) + transfUtils.getVectorLength(paths[ii].posTanX2[2][2]) ) * 0.5
			-- print('xScaleFactor for terminal', nTerminal, 'is', xScaleFactor)
			averageXScaleFactor = averageXScaleFactor + xScaleFactor
			result.models[#result.models+1] = {
				id = _constants.slopedCargoArea1x20ModelFileName,
				transf = transfUtilsUG.mul(
					myTransf,
					{ xScaleFactor * 1.2, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, 0, _constants.platformSideBitsZ, 1 }
				),
				tag = tag
			}
			-- faces[#faces+1] = {
			-- 	{-10.5, -0.5, 0, 1},
			-- 	{-10.5, 0.5, 0, 1},
			-- 	{10.5, 0.5, 0, 1},
			-- 	{10.5, -0.5, 0, 1},
			-- }

			if ii > 2 and ii < #paths - 1 and math.fmod(ii, math.ceil(4 / xScaleFactor)) == 0 then
				result.models[#result.models+1] = {
					id = _constants.cargoWaitingAreaCentredModelFileName,
					transf = transfUtilsUG.mul(
						myTransf,
						{ 0, 16, 0, 0,  -16, 0, 0, 0,  0, 0, 1, 0,  0, 0, result.laneZs[nTerminal], 1 }
					),
					tag = slotHelpers.mangleModelTag(nTerminal, true),
				}
			end
		end

		if params.terminals[nTerminal].centrePlatforms[nTrackEdge].type == 0 and #paths > 0 then -- only align terrain if on ground
			averageXScaleFactor = averageXScaleFactor / #paths
			-- LOLLO TODO this is no good, try a tight curve with a sloped area inward and one outward
			local face = {
				-- {-10.5, -15, 0, 1},
				-- {-10.5, 15, 0, 1},
				-- {10.5, 13, 0, 1},
				-- {10.5, -13, 0, 1},
				{-10.5, -12 * averageXScaleFactor, 0, 1},
				{-10.5, 12 * averageXScaleFactor, 0, 1},
				{10.5, 9 * averageXScaleFactor, 0, 1},
				{10.5, -9 * averageXScaleFactor, 0, 1},
			}
			modulesutil.TransformFaces(slotTransf, face)
			-- for _, face in pairs(faces) do
				-- print('face before transform =') debugPrint(face)
				-- modulesutil.TransformFaces(slotTransf, face)
				-- print('face after transform =') debugPrint(face)
				result.groundFaces[#result.groundFaces + 1] = moduleHelpers.getGroundFace(face, 'shared/asphalt_01.gtex.lua')
				result.terrainAlignmentLists[#result.terrainAlignmentLists + 1] = moduleHelpers.getTerrainAlignmentList(face, 0, 'EQUAL', 1, 0.5)
			-- end
		end
	end,

	getModelsFn = function(params)
		local results = {}
		for y = -10, 10 do
			results[#results+1] = {
				id = _constants.slopedCargoArea1x20ModelFileName,
				transf = {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, y, 0, 1},
			}
		end
		return results
	end
}

end
