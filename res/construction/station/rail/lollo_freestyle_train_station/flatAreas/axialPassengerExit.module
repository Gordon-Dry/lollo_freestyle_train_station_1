local _constants = require('lollo_freestyle_train_station.constants')
-- local constructionutil = require 'constructionutil'
-- local logger = require('lollo_freestyle_train_station.logger')
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
local modulesutil = require 'modulesutil'
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require 'transf'


function data()
	return {
		availability = {
			yearFrom = 0,
			yearTo = 0
		},
		category = {
			categories = { 'passenger-road-access', },
		},
		cost = {
			price = 0,
		},
		description = {
			name = _('AxialFlushPassengerExitName'),
			description = _('AxialFlushPassengerExitDesc'),
			icon = 'ui/lollo_freestyle_train_station/axialFlushPassengerExit.tga'
		},
		metadata = { },
		order = {
			value = 14,
		},
		type = _constants.axialFlushPassengerExitModuleType,
		updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, updateScriptParams)
			local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
			if not nTerminal or not baseId then return end

			moduleHelpers.flatAreas.addExitPole(result, slotTransf, tag, slotId, params, nTerminal, nTrackEdge)

			local cpl = params.terminals[nTerminal].centrePlatformsRelative[(nTrackEdge == 1 and 1 or #params.terminals[nTerminal].centrePlatformsRelative)]

			local pos1 = (nTrackEdge == 1)
				and cpl.posTanX2[1][1]
				or cpl.posTanX2[2][1]
			local deltaPos = (nTrackEdge == 1)
				and transfUtils.getVectorNormalised(
					{
						cpl.posTanX2[1][1][1] - cpl.posTanX2[2][1][1],
						cpl.posTanX2[1][1][2] - cpl.posTanX2[2][1][2],
						cpl.posTanX2[1][1][3] - cpl.posTanX2[2][1][3],
					},
					1
				)
				or transfUtils.getVectorNormalised(
					{
						cpl.posTanX2[2][1][1] - cpl.posTanX2[1][1][1],
						cpl.posTanX2[2][1][2] - cpl.posTanX2[1][1][2],
						cpl.posTanX2[2][1][3] - cpl.posTanX2[1][1][3],
					},
					1
				)
			local pos2 = {
				pos1[1] + deltaPos[1],
				pos1[2] + deltaPos[2],
				pos1[3] + deltaPos[3],
			}

			local laneTransf = transfUtils.getTransfZShiftedBy(
				transfUtils.get1MLaneTransf(pos1, pos2),
				result.laneZs[nTerminal]
			)

			result.models[#result.models+1] = {
				id = 'lollo_freestyle_train_station/passenger_lane_linkable_irregular.mdl',
				slotId = slotId,
				transf = laneTransf,
				tag = tag
			}
		end,

		getModelsFn = function(params)
			return {
				{
					id = 'lollo_freestyle_train_station/asset/era_c_perron_number.mdl',
					transf = {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  -1, 0, 0, 1},
				},
			}
		end
	}
end
